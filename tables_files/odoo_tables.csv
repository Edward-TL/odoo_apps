app,module,component,model_name,description
account,account,,account.account,Account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,analytic,account,account.analytic.account,Analytic Account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,applicant,,hr.applicant,Applicant (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,type,,appointment.type,"Appointment Type (This file inherits the appointment.type model and centralize all methods linked to appointment type templates in a separate file. These templates are used to ease the onboarding and load specific configurations, hinted by their description. They appear instead of the helper on appointment.type list and kanban views when no appointment exists.)"
knowledge,article,thread,knowledge.article.thread,"Article Discussion Thread (This is the model for a comment thread linked to a `knowledge.article`. Each thread inherits the `mail.thread` mixin. These threads allow end-users to discuss specific parts of the body of a knowledge article. Which enables reviews, taking notes, pinging a colleague to get more information on a topic, ... Each initial comment starts its own thread, which will then accumulate replies, reactions, etc. It is also possible to mark a thread as closed so that it no longer appears inside the editor of the article if the conversation does not need to be continued.)"
account,asset,,account.asset,Asset/Revenue Recognition (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,attendance,,hr.attendance,Attendance (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,partner,bank,res.partner.bank,Bank Accounts (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,online,link,account.online.link,Bank Connection (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,bank,statement,account.bank.statement,Bank Statement (Base model to inherit from to add extract functionality to a model.)
extract,mixin,,extract.mixin,Base class to extract data from documents (Base model to inherit from to add extract functionality to a model.)
mrp,bom,,mrp.bom,"Bill of Material (Mail Activity Mixin is a mixin class to use if you want to add activities management on a model. It works like the mail.thread mixin. It defines an activity_ids one2many field toward activities using res_id and res_model_id. Various related / computed fields are also added to have a global status of activities on documents. Activities come with a new JS widget for the form view. It is integrated in the Chatter widget although it is a separate widget. It displays activities linked to the current record and allow to schedule, edit and mark done activities. There is also a kanban widget defined. It defines a small widget to integrate in kanban vignettes. It allow to manage activities directly from the kanban view. Use widget """"kanban_activity"""" on activitiy_ids field in kanban view to use it. Some context keys allow to control the mixin behavior. Use those in some specific cases like import * ``mail_activity_automation_skip``: skip activities automation; it means no automated activities will be generated, updated or unlinked, allowing to save computation and avoid generating unwanted activities;)"
calendar,event,,calendar.event,Calendar Event (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,candidate,,hr.candidate,Candidate (Base model to inherit from to add extract functionality to a model.)
res,company,,res.company,Companies (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,partner,,res.partner,Contact (Inherited to complete the attributes required to DIOT Report Added required fields according with the provisions in the next SAT document `Document <goo.gl/THPLDk>`_. To allow generate the form A-29 requested by this SAT.)
slide,channel,,slide.channel,Course (A channel is a container of slides.)
hr,department,,hr.department,Department (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
discuss,channel,,discuss.channel,"Discussion Channel (Support WhatsApp Channels, used for discussion with a specific whasapp number)"
documents,document,,documents.document,Document (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,thread,cc,mail.thread.cc,Email CC management (Update MailThread to add the support of bounce management in mass mailing traces.)
mail,thread,,mail.thread,Email Thread (Update MailThread to add the support of bounce management in mass mailing traces.)
hr,employee,,hr.employee,"Employee (NB: Any field only available on the model hr.employee (i.e. not on the hr.employee.public model) should have `groups """"hr.group_hr_user""""` on its definition to avoid being prefetched when the user hasn't access to the hr.employee model. Indeed, the prefetch loads the data for all the fields that are available according to the group defined on them.)"
hr,contract,,hr.contract,Employee Contract (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,event,,event.event,Event (Event)
event,registration,,event.registration,Event Registration (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,sponsor,,event.sponsor,Event Sponsor (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,track,,event.track,Event Track (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,expense,,hr.expense,Expense (Base model to inherit from to add extract functionality to a model.)
hr,expense,sheet,hr.expense.sheet,"Expense Report (Here are the rights associated with the expense flow Action Group Restriction   Submit Employee Only his own Officer If he is expense manager of the employee, manager of the employee or the employee is in the department managed by the officer Manager Always Approve Officer Not his own and he is expense manager of the employee, manager of the employee or the employee is in the department managed by the officer Manager Always Post Anybody State   approve and journal_id defined Done Anybody State   approve and journal_id defined Cancel Officer Not his own and he is expense manager of the employee, manager of the employee or the employee is in the department managed by the officer Manager Always  )"
gamification,badge,,gamification.badge,Gamification Badge (Badge object that users can send and receive)
gamification,challenge,,gamification.challenge,"Gamification Challenge (Gamification challenge Set of predifined objectives assigned to people with rules for recurrence and rewards If 'user_ids' is defined and 'period' is different than 'one', the set will be assigned to the users for each period (eg: every 1st of each month if 'monthly' is selected))"
iap,account,,iap.account,IAP Account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,job,,hr.job,Job Position (A mixin for models that inherits mail.alias to have a one-to-one relation between the model and its alias.)
account,journal,,account.journal,Journal (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,move,,account.move,Journal Entry (Base model to inherit from to add extract functionality to a model.)
knowledge,article,,knowledge.article,Knowledge Article (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,lead,,crm.lead,Lead/Opportunity (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,loan,,account.loan,Loan (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,lot,,stock.lot,Lot/Serial (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
loyalty,card,,loyalty.card,Loyalty Coupon (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,blacklist,,mail.blacklist,Mail Blacklist (Model of blacklisted email addresses to stop sending emails.)
mail,thread,blacklist,mail.thread.blacklist,"Mail Blacklist mixin (Mixin that is inherited by all model with opt out. This mixin stores a normalized email based on primary_email field. A normalized email is considered as : - having a left part + @ + a right part (the domain can be without '.something') - being lower case - having no name before the address. Typically, having no 'Name <>' Ex: - Formatted Email : 'Name <NaMe@DoMaIn.CoM>' - Normalized Email : 'name@domain.com' The primary email field can be specified on the parent model, if it differs from the default one ('email') The email_normalized field can than be used on that model to search quickly on emails (by simple comparison and not using time consuming regex anymore). Using this email_normalized field, blacklist status is computed. Mail Thread capabilities are required for this mixin.)"
mail,thread,main.attachment,mail.thread.main.attachment,Mail Main Attachment management (Mixin that adds main attachment support to the MailThread class.)
mailing,contact,,mailing.contact,"Mailing Contact (Model of a contact. This model is different from the partner model because it holds only some basic information: name, email. The purpose is to be able to deal with large contact list to email without bloating the partner base.)"
mrp,production,,mrp.production,Manufacturing Order (Manufacturing Orders)
card,campaign,,card.campaign,Marketing Card Campaign (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mailing,mailing,,mailing.mailing,Mass Mailing (Mass Mailing models the sending of emails to a list of recipients for a mass mailing campaign.)
fleet,vehicle,model,fleet.vehicle.model,Model of a vehicle (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,,hr.payslip,Pay Slip (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,payment,,account.payment,Payments (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,run,hr.payslip.run,Payslip Batches (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
phone,blacklist,,phone.blacklist,Phone Blacklist (Blacklist of phone numbers. Used to avoid sending unwanted messages to people.)
mail,thread,phone,mail.thread.phone,"Phone Blacklist Mixin (Purpose of this mixin is to offer two services * compute a sanitized phone number based on _phone_get_number_fields. It takes first sanitized value, trying each field returned by the method (see ``BaseModel._phone_get_number_fields()´´ for more details about the usage of this method); * compute blacklist state of records. It is based on phone.blacklist model and give an easy-to-use field and API to manipulate blacklisted records; Main API methods * ``_phone_set_blacklisted``: set recordset as blacklisted; * ``_phone_reset_blacklisted``: reactivate recordset (even if not blacklisted this method can be called safely);)"
pos,order,,pos.order,Point of Sale Orders (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,session,,pos.session,Point of Sale Session (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,reconcile,model,account.reconcile.model,Preset to create journal entries during a invoices and payments matching (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,pricelist,,product.pricelist,Pricelist (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,template,,product.template,Product (This mixin adds rating statistics to mail.thread that already support ratings.)
product,category,,product.category,Product Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,product,,product.product,Product Variant (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,project,,project.project,Project (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,milestone,,project.milestone,Project Milestone (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,update,,project.update,Project Update (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
purchase,order,,purchase.order,Purchase Order (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,alert,,quality.alert,Quality Alert (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,alert,team,quality.alert.team,Quality Alert Team (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,check,,quality.check,Quality Check (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,point,,quality.point,Quality Control Point (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
rating,mixin,,rating.mixin,Rating Mixin (This mixin adds rating statistics to mail.thread that already support ratings.)
hr,salary,attachment,hr.salary.attachment,Salary Attachment (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,,sale.order,Sales Order (This mixin adds rating statistics to mail.thread that already support ratings.)
crm,team,,crm.team,Sales Team (A mixin for models that inherits mail.alias to have a one-to-one relation between the model and its alias.)
crm,team,member,crm.team.member,Sales Team Member (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,scrap,,stock.scrap,Scrap (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,log.services,fleet.vehicle.log.services,Services for vehicles (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,slide,,slide.slide,Slides (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
social,media,,social.media,Social Media (The Instagram social media implementation is a bit special because it goes through the Facebook API to fetch information (as Facebook owns Instagram). That also means we can only add Instagram accounts through Facebook.)
social,post,,social.post,"Social Post (A social.post represents a post that will be published on multiple social.accounts at once. It doesn't do anything on its own except storing the global post configuration (message, images, ...). This model inherits from `social.post.template` which contains the common part of both (all fields related to the post content like the message, the images...). So we do not duplicate the code by inheriting from it. We can generate a `social.post` from a `social.post.template` with `action_generate_post`. When posted, it actually creates several instances of social.live.posts (one per social.account) that will publish their content through the third party API of the social.account.)"
spreadsheet,cell,thread,spreadsheet.cell.thread,Spreadsheet discussion thread (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,approval,rule,studio.approval.rule,Studio Approval Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
survey,survey,,survey.survey,Survey (This model defines additional actions on the 'survey.survey' model that can be used to load a survey sample. The model defines a sample for each survey type: (1) survey: A feedback form (2) assessment: A certification (3) live_session: A live presentation (4) custom: An empty survey)
survey,user_input,,survey.user_input,Survey User Input (Metadata for a set of one user's answers to a particular survey)
project,task,,project.task,Task (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,tax,,account.tax,Tax (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,,hr.leave,"Time Off (Time Off Requests Access specifications - a regular employee / user - can see all leaves; - cannot see name field of leaves belonging to other user as it may contain private information that we don't want to share to other people than HR people; - can modify only its own not validated leaves (except writing on state to bypass approval); - can discuss on its leave requests; - can reset only its own leaves; - cannot validate any leaves; - an Officer - can see all leaves; - can validate """"HR"""" single validation leaves from people if - he is the employee manager; - he is the department manager; - he is member of the same department; - target employee has no manager and no department manager; - can validate """"Manager"""" single validation leaves from people if - he is the employee manager; - he is the department manager; - target employee has no manager and no department manager; - can first validate """"Both"""" double validation leaves from people like """"HR"""" single validation, moving the leaves to validate1 state; - cannot validate its own leaves; - can reset only its own leaves; - can refuse all leaves; - a Manager - can do everything he wants On top of that multicompany rules apply based on company defined on the leave request leave type.)"
hr,leave,allocation,hr.leave.allocation,Time Off Allocation (Allocation Requests Access specifications: similar to leave requests)
stock,picking,,stock.picking,Transfer (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,unbuild,,mrp.unbuild,Unbuild Order (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,,fleet.vehicle,Vehicle (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,log.contract,fleet.vehicle.log.contract,Vehicle Contract (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,account,,whatsapp.account,WhatsApp Business Account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,template,,whatsapp.template,WhatsApp Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,workcenter,,mrp.workcenter,Work Center (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,routing,workcenter,mrp.routing.workcenter,Work Center Usage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
auth_totp,wizard,,auth_totp.wizard,"2-Factor Setup Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,pos_hr,multi_employee_sales_report,report.pos_hr.multi_employee_sales_report,"A collection of single session reports. One for each employee (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_a_nz,account.edi.xml.ubl_a_nz,"A-NZ BIS Billing 3.0 (The base model, which is implicitly inherited by all models.)"
res,users,apikeys.description,res.users.apikeys.description,"API Key Description (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,groups,,res.groups,Access Groups (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
account,cash,rounding,account.cash.rounding,"Account Cash Rounding (In some countries, we need to be able to make appear on an invoice a rounding line, appearing there only because the smallest coinage has been removed from the circulation. For example, in Switzerland invoices have to be rounded to 0.05 CHF because coins of 0.01 CHF and 0.02 CHF aren't used anymore. see https://en.wikipedia.org/wiki/Cash_rounding for more details.)"
account,chart,template,account.chart.template,"Account Chart Template (The base model, which is implicitly inherited by all models.)"
account,group,,account.group,Account Group (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,journal,group,account.journal.group,Account Journal Group (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,lock_exception,,account.lock_exception,Account Lock Exception (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,move,reversal,account.move.reversal,"Account Move Reversal (Account move reversal wizard, it cancel an account move by reversing it.)"
account,move,send,account.move.send,Account Move Send (Shared class between the two sending wizards. See 'account.move.send.batch.wizard' for multiple invoices sending wizard (async) and 'account.move.send.wizard' for single invoice sending wizard (sync).)
account,move,send.batch.wizard,account.move.send.batch.wizard,Account Move Send Batch Wizard (Wizard that handles the sending of multiple invoices.)
account,move,send.wizard,account.move.send.wizard,Account Move Send Wizard (Wizard that handles the sending a single invoice.)
account,report,annotation,account.report.annotation,Account Report Annotation (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,custom.handler,account.report.custom.handler,"Account Report Custom Handler (The base model, which is implicitly inherited by all models.)"
account,tax,report.handler,account.tax.report.handler,"Account Report Handler for Tax Reports (The base model, which is implicitly inherited by all models.)"
account,report,send,account.report.send,"Account Report Send (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,account,tag,account.account.tag,Account Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,transfer,model,account.transfer.model,Account Transfer Model (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,transfer,model.line,account.transfer.model.line,Account Transfer Model Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,auto,reconcile.wizard,account.auto.reconcile.wizard,Account automatic reconciliation wizard (This wizard is used to automatically reconcile account.move.line. It is accessible trough Accounting > Accounting tab > Actions > Auto-reconcile menuitem.)
account,root,,account.root,Account codes first 2 digits (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,import,summary,account.import.summary,"Account import summary view (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,merge,wizard,account.merge.wizard,"Account merge wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,merge,wizard.line,account.merge.wizard.line,"Account merge wizard line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,account,wip.accounting.line,mrp.account.wip.accounting.line,"Account move line to be created when posting WIP account move (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,reconcile,wizard,account.reconcile.wizard,Account reconciliation wizard (This wizard is used to reconcile selected account.move.line.)
report,account,report_invoice_with_payments,report.account.report_invoice_with_payments,"Account report with payment lines (The base model, which is implicitly inherited by all models.)"
report,account,report_invoice,report.account.report_invoice,"Account report without payment lines (The base model, which is implicitly inherited by all models.)"
account,report,,account.report,Accounting Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,budget,account.report.budget,Accounting Report Budget (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,budget.item,account.report.budget.item,Accounting Report Budget Item (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,column,account.report.column,Accounting Report Column (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,expression,account.report.expression,Accounting Report Expression (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,external.value,account.report.external.value,Accounting Report External Value (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,line,account.report.line,Accounting Report Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,fiscal,position.account,account.fiscal.position.account,Accounts Mapping of Fiscal Position (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,accrual.plan,hr.leave.accrual.plan,Accrual Plan (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,accrual.level,hr.leave.accrual.level,Accrual Plan Level (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,accrued,orders.wizard,account.accrued.orders.wizard,"Accrued Orders Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,actions,act_url,ir.actions.act_url,Action URL (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,actions,act_window,ir.actions.act_window,Action Window (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
ir,actions,act_window_close,ir.actions.act_window_close,Action Window Close (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,actions,act_window.view,ir.actions.act_window.view,Action Window View (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
ir,actions,actions,ir.actions.actions,Actions (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,activity,,mail.activity,Activity (An actual activity to perform. Activities are linked to documents using res_id and res_model_id fields. Activities have a deadline that can be used in kanban view to display a status. Once done activities are unlinked and a message is posted. This message has a new activity_type_id field that indicates the activity linked to the message.)
mail,activity,mixin,mail.activity.mixin,"Activity Mixin (Mail Activity Mixin is a mixin class to use if you want to add activities management on a model. It works like the mail.thread mixin. It defines an activity_ids one2many field toward activities using res_id and res_model_id. Various related / computed fields are also added to have a global status of activities on documents. Activities come with a new JS widget for the form view. It is integrated in the Chatter widget although it is a separate widget. It displays activities linked to the current record and allow to schedule, edit and mark done activities. There is also a kanban widget defined. It defines a small widget to integrate in kanban vignettes. It allow to manage activities directly from the kanban view. Use widget """"kanban_activity"""" on activitiy_ids field in kanban view to use it. Some context keys allow to control the mixin behavior. Use those in some specific cases like import * ``mail_activity_automation_skip``: skip activities automation; it means no automated activities will be generated, updated or unlinked, allowing to save computation and avoid generating unwanted activities;)"
mail,activity,plan,mail.activity.plan,Activity Plan (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,activity,type,mail.activity.type,"Activity Type (Activity Types are used to categorize activities. Each type is a different kind of activity e.g. call, mail, meeting. An activity can be generic i.e. available for all models using activities; or specific to a model in which case res_model field should be used.)"
mail,activity,plan.template,mail.activity.plan.template,Activity plan template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,activity,schedule,mail.activity.schedule,"Activity schedule plan Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mailing,contact,to.list,mailing.contact.to.list,"Add Contacts to Mailing List (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
add,iot,box,add.iot.box,"Add IoT Box wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
appointment,manage,leaves,appointment.manage.leaves,"Add or remove leaves from appointments (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,workcenter,tag,mrp.workcenter.tag,Add tag for the workcenter (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n_mx_edi,addenda,,l10n_mx_edi.addenda,Addenda for Mexican EDI (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp_production,additional,workorder,mrp_production.additional.workorder,"Additional Workorder (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
slide,slide,resource,slide.slide.resource,Additional resource for a particular slide (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
format,address,mixin,format.address.mixin,"Address Format (The base model, which is implicitly inherited by all models.)"
account,aged,partner.balance.report.handler,account.aged.partner.balance.report.handler,"Aged Partner Balance Custom Handler (The base model, which is implicitly inherited by all models.)"
account,aged,payable.report.handler,account.aged.payable.report.handler,"Aged Payable Custom Handler (The base model, which is implicitly inherited by all models.)"
account,aged,receivable.report.handler,account.aged.receivable.report.handler,"Aged Receivable Custom Handler (The base model, which is implicitly inherited by all models.)"
website,route,,website.route,All Website Route (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,profile,,ir.profile,Allow profiling only to Tech Support level (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,analytic,distribution.model,account.analytic.distribution.model,Analytic Distribution Model (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,analytic,line,account.analytic.line,Analytic Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
analytic,mixin,,analytic.mixin,"Analytic Mixin (The base model, which is implicitly inherited by all models.)"
analytic,plan,fields.mixin,analytic.plan.fields.mixin,Analytic Plan Fields (Add one field per analytic plan to the model)
account,analytic,applicability,account.analytic.applicability,Analytic Plan's Applicabilities (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,analytic,plan,account.analytic.plan,Analytic Plans (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,recruitment,degree,hr.recruitment.degree,Applicant Degree (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,module,category,ir.module.category,Application (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,answer,input,appointment.answer.input,Appointment Answer Inputs (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,booking,line,appointment.booking.line,Appointment Booking Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,invite,,appointment.invite,Appointment Invite (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,answer,,appointment.answer,Appointment Question Answers (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,question,,appointment.question,Appointment Questions (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,resource,,appointment.resource,Appointment Resource (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
appointment,slot,,appointment.slot,Appointment: Time Slot (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,approval,rule.approver,studio.approval.rule.approver,Approval Rule Approvers Enriched (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,approval,rule.delegate,studio.approval.rule.delegate,"Approval Rule Delegate (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
knowledge,article,member,knowledge.article.member,Article Member (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
knowledge,article,template.category,knowledge.article.template.category,Article Template Category (This model represents the categories of the article templates.)
ir,asset,,ir.asset,Asset (This model contributes to two things: 1. It provides a function returning a list of all file paths declared in a given list of addons (see _get_addon_paths); 2. It allows to create 'ir.asset' records to add additional directives to certain bundles.)
account,asset,group,account.asset.group,Asset Group (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,asset,report.handler,account.asset.report.handler,"Assets Report Custom Handler (The base model, which is implicitly inherited by all models.)"
web_editor,assets,,web_editor.assets,"Assets Utils (The base model, which is implicitly inherited by all models.)"
ir,attachment,,ir.attachment,"Attachment (Attachments are used to link binary files or url to any openerp document. External attachment storage --------------------------- The computed field ``datas`` is implemented using ``_file_read``, ``_file_write`` and ``_file_delete``, which can be overridden to implement other storage engines. Such methods should check for other location pseudo uri (example: hdfs://hadoopserver). The default implementation is the file:dirname location that stores files on the local filesystem using name based on their sha1 hash)"
hr,attendance,overtime,hr.attendance.overtime,Attendance Overtime (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,attribute,value,product.attribute.value,Attribute Value (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
auth_totp,device,,auth_totp.device,Authentication Device (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,autovacuum,,ir.autovacuum,Automatic Vacuum (Helper model to the ``@api.autovacuum`` method decorator.)
sequence,mixin,,sequence.mixin,Automatic sequence (Mechanism used to have an editable sequence number. Be careful of how you use this regarding the prefixes. More info in the docstring of _get_last_sequence.)
base,automation,,base.automation,Automation Rule (Add resource and calendar for time-based conditions)
account,autopost,bills.wizard,account.autopost.bills.wizard,"Autopost Bills Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
avatar,mixin,,avatar.mixin,"Avatar Mixin (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_de,account.edi.xml.ubl_de,"BIS3 DE (XRechnung) (The base model, which is implicitly inherited by all models.)"
report,mrp,report_bom_structure,report.mrp.report_bom_structure,"BOM Overview Report (The base model, which is implicitly inherited by all models.)"
stock,backorder,confirmation,stock.backorder.confirmation,"Backorder Confirmation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,backorder,confirmation.line,stock.backorder.confirmation.line,"Backorder Confirmation Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,production,backorder.line,mrp.production.backorder.line,"Backorder Confirmation Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,balance,sheet.report.handler,account.balance.sheet.report.handler,"Balance Sheet Custom Handler (The base model, which is implicitly inherited by all models.)"
res,bank,,res.bank,Bank (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,bank,reconciliation.report.handler,account.bank.reconciliation.report.handler,"Bank Reconciliation Report Custom Handler (The base model, which is implicitly inherited by all models.)"
account,bank,statement.line,account.bank.statement.line,Bank Statement Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
bank,rec,widget,bank.rec.widget,Bank reconciliation widget for a single statement line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,setup,bank.manual.config,account.setup.bank.manual.config,"Bank setup manual config (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
barcodes,barcode_events_mixin,,barcodes.barcode_events_mixin,"Barcode Event Mixin (Mixin class for objects reacting when a barcode is scanned in their form views which contains `<field name """"_barcode_scanned"""" widget """"barcode_handler""""/>`. Models using this mixin must implement the method on_barcode_scanned. It works like an onchange and receives the scanned barcode in parameter.)"
barcode,nomenclature,,barcode.nomenclature,Barcode Nomenclature (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
barcode,rule,,barcode.rule,Barcode Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
base,,,base,"Base (The base model, which is implicitly inherited by all models.)"
base_import,import,,base_import.import,"Base Import (This model is used to prepare the loading of data coming from a user file. Here is the process that is followed: #. The user selects a file to import. #. File parsing and mapping suggestion (see """"parse_preview"""" method) #. Extract the current model's importable fields tree (see :meth:`get_fields_tree`). #. Read the file (see :meth:`_read_file`) and extract header names and file length (used for batch import). #. Extract headers types from the data preview (10 first line of the file) (see :meth:`_extract_headers_types`). #. Try to find for each header a field to map with (see :meth:`_get_mapping_suggestions`) - First check the previously saved mappings between the header name and one of the model's fields. - If no mapping found, try an exact match comparison using fields technical names, labels and user language translated labels. - If nothing found, try a fuzzy match using word distance between header name and fields tachnical names, labels and user language translated labels. Keep only the closest match. #. Prepare examples for each columns using the first non null value from each column. #. Send the info back to the UI where the user can modify the suggested mapping. #. Execute the import: There are two import mode with uses the same process. (see :meth:`execute_import`) #. Test import: Try to import but rollback the transaction. This allows the check errors during the import process and allow the user to choose import options for the different encountered errors. #. Real import: Try to import the file using the configured mapping and the eventual """"error mapping options"""". If import encounters blocking errors, the transaction is rollbacked and the user is allowed to choose import options for the different errors. - Get file data and fields to import into (see :meth:`_convert_import_data`). - Parse date, float and binary data (see :meth:`_parse_import_data`). - Handle multiple mapping -> concatenate char/text/many2many columns mapped on the same field (see :meth:`_handle_multi_mapping`). - Handle fallback values for boolean and selection fields, in case input data does not match any allowed values (see :meth:`_handle_fallback_values`). - Load data (see ir.model """"load"""" method). - Rollback transaction if test mode or if encountered error. - Save mapping if any import is successful to ease later mapping suggestions. - Return import result to the UI (success or errors if any).)"
base_import,mapping,,base_import.mapping,Base Import Mapping (mapping of previous column:field selections This is useful when repeatedly importing from a third-party system: column names generated by the external system may not match Odoo's field names or labels. This model is used to save the mapping between column names and fields so that next time a user imports from the same third-party systems we can automatically match the columns to the correct field without them having to re-enter the mapping every single time.)
hr,employee,base,hr.employee.base,"Basic Employee (The base model, which is implicitly inherited by all models.)"
mrp,bom,line,mrp.bom.line,Bill of Material Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
bill,to,po.wizard,bill.to.po.wizard,"Bill to Purchase Order (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
fleet,vehicle,model.brand,fleet.vehicle.model.brand,Brand of the vehicle (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,task,burndown.chart.report,project.task.burndown.chart.report,"Burndown Chart (The base model, which is implicitly inherited by all models.)"
pos,bus,mixin,pos.bus.mixin,"Bus Mixin (The base model, which is implicitly inherited by all models.)"
mrp,bom,byproduct,mrp.bom.byproduct,Byproduct (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,activity,report,crm.activity.report,CRM Activity Analysis (CRM Lead Analysis)
crm,recurring,plan,crm.recurring.plan,CRM Recurring revenue plans (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,stage,,crm.stage,"CRM Stages (Model for case stages. This models the main stages of a document management flow. Main CRM objects (leads, opportunities, project issues, ...) will now use only stages, instead of state and stages. Stages are for example used to display the kanban view of records.)"
crm,tag,,crm.tag,CRM Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
x_cables,,,x_cables,Cables (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
calendar,attendee,,calendar.attendee,Calendar Attendee Information (Calendar Attendee Information)
calendar,filters,,calendar.filters,Calendar Filters (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
calendar,popover,delete.wizard,calendar.popover.delete.wizard,"Calendar Popover Delete Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
calendar,provider,config,calendar.provider.config,"Calendar Provider Configuration Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
utm,stage,,utm.stage,Campaign Stage (Stage for utm campaigns.)
bus,listener,mixin,bus.listener.mixin,Can send messages via bus.bus (Allow sending messages related to the current model via as a bus.bus channel. The model needs to be allowed as a valid channel for the bus in `_build_bus_channel_list`.)
stock_barcode,cancel,operation,stock_barcode.cancel.operation,"Cancel Operation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,holidays,cancel.leave,hr.holidays.cancel.leave,"Cancel Time Off Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,mass,cancel.orders,sale.mass.cancel.orders,"Cancel multiple quotations (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mail,canned,response,mail.canned.response,Canned Response (Canned Response: content that will automatically replace the shortcut of your choosing. This content can still be adapted before sending your message.)
account,cash,flow.report.handler,account.cash.flow.report.handler,"Cash Flow Report Custom Handler (The base model, which is implicitly inherited by all models.)"
hr,applicant,category,hr.applicant.category,Category of applicant (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,model.category,fleet.vehicle.model.category,Category of the model (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
certificate,certificate,,certificate.certificate,Certificate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,change,lock.date,account.change.lock.date,Change Lock Date (This wizard is used to change the lock date)
change,password,wizard,change.password.wizard,Change Password Wizard (A wizard to manage the change of users' passwords.)
stock,change,product.qty,stock.change.product.qty,"Change Product Quantity (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
change,production,qty,change.production.qty,"Change Production Qty (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
slide,channel,partner,slide.channel.partner,Channel / Partners (Members) (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,channel,invite,slide.channel.invite,"Channel Invitation Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
discuss,channel,member,discuss.channel.member,Channel Member (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,channel,tag.group,slide.channel.tag.group,Channel/Course Groups (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,channel,tag,slide.channel.tag,Channel/Course Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
chat,room,,chat.room,Chat Room (Store all useful information to manage chat room (currently limited to Jitsi). This model embeds all information about the chat room. We do not store them in the related mixin (see chat.room.mixin) to avoid to add too many fields on the models which want to use the chat room mixin as the behavior can be optional in those models. The participant count is automatically updated thanks to the chat room widget to avoid having a costly computed field with a members model.)
chat,room,mixin,chat.room.mixin,"Chat Room Mixin (Add the chat room configuration (`chat.room`) on the needed models. The chat room configuration contains all information about the room. So, we store all the chat room logic at the same place, for all models. Embed chat room related fields prefixed with `room_`.)"
lot,label,layout,lot.label.layout,"Choose the sheet layout to print lot labels (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
product,label,layout,product.label.layout,"Choose the sheet layout to print the labels (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
picking,label,type,picking.label.type,"Choose whether to print product or lot/sn labels (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,actions,client,ir.actions.client,Client Action (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,loan,close.wizard,account.loan.close.wizard,"Close Loan Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
pos,close,session.wizard,pos.close.session.wizard,"Close Session Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
pos,bill,,pos.bill,Coins/Bills (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
spreadsheet,revision,,spreadsheet.revision,Collaborative spreadsheet revision (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,collaborator,,project.collaborator,Collaborators in project shared (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,edi,common,account.edi.common,"Common functions for EDI documents: generate the data, the constraints, etc (The base model, which is implicitly inherited by all models.)"
sale,edi,common,sale.edi.common,"Common functions for EDI orders (The base model, which is implicitly inherited by all models.)"
bus,bus,,bus.bus,Communication Bus (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
base,document,layout,base.document.layout,Company Document Layout (Customise the company document layout and display a live preview)
res,config,,res.config,"Config (Base classes for new-style configuration items Configuration items should inherit from this class, implement the execute method (and optionally the cancel one) and have their view inherit from the related res_config_view_base view.)"
res,config,settings,res.config.settings,"Config Settings (NOTES 1. Fields with name starting with 'pos_' are removed from the vals before super call to `create`. Values of these fields are written to `pos_config_id` record after the super call. This is done so that these fields are written at the same time to the active pos.config record. 2. During `creation` of this record, each related field is written to the source record *one after the other*, so constraints on the source record that are based on multiple fields might not work properly. However, only the *modified* related fields are written to the source field. But the identification of modified fields happen during the super call, not before `create` is called. Because of this, vals contains a lot of field before super call, then the number of fields is reduced after.)"
ir,actions,todo,ir.actions.todo,Configuration Wizards (Configuration Wizards)
confirm,stock,sms,confirm.stock.sms,"Confirm Stock SMS (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,inventory,conflict,stock.inventory.conflict,"Conflict in Inventory (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
slide,question,,slide.question,Content Quiz Question (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,contract,type,hr.contract.type,Contract Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,contract,employee.report,hr.contract.employee.report,Contract and Employee Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,contract,history,hr.contract.history,Contract history (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,lead2opportunity,partner.mass,crm.lead2opportunity.partner.mass,"Convert Lead to Opportunity (in mass) (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
crm,lead2opportunity,partner,crm.lead2opportunity.partner,"Convert Lead to Opportunity (not in mass) (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
social,post,to.lead,social.post.to.lead,"Convert Social Post to Lead (Simple wizard allowing to convert a social.stream.post or a comment/reply to a post into a lead. This wizard is typically used from the """"Feed"""" social view, when the end user can interact with its community through their posts or view other people's posts. For more information about the 2 'sources' of conversion ('comment' and 'stream_post'), see #action_convert_to_lead. Please note that for obvious privacy reasons, the social media platforms will not provide us with people's email, phone or address information, we only have the author name and the content of their post/comment. For that reason, end users will probably often only convert to leads based on existing clients, since otherwise they will not have any mean to contact the created lead.)"
spreadsheet,dashboard,share,spreadsheet.dashboard.share,Copy of a shared dashboard (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,country,,res.country,Country (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,country,group,res.country.group,Country Group (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
format,vat,label.mixin,format.vat.label.mixin,"Country Specific VAT Label (The base model, which is implicitly inherited by all models.)"
res,country,state,res.country.state,Country state (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,cover_properties,mixin,website.cover_properties.mixin,"Cover Properties Website Mixin (The base model, which is implicitly inherited by all models.)"
account,automatic,entry.wizard,account.automatic.entry.wizard,"Create Automatic Entries (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,create,invoice,project.create.invoice,"Create Invoice from project (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
wizard,ir,model.menu.create,wizard.ir.model.menu.create,"Create Menu Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,task,create.timesheet,project.task.create.timesheet,"Create Timesheet from task (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
spreadsheet,document,to.dashboard,spreadsheet.document.to.dashboard,"Create a dashboard from a spreadsheet document (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
l10n_mx_edi,global_invoice,create,l10n_mx_edi.global_invoice.create,Create a global invoice (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,activity,todo.create,mail.activity.todo.create,"Create activity and todo at the same time (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
coupon,share,,coupon.share,"Create links that apply a coupon and redirect to a specific page (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
crm,quotation,partner,crm.quotation.partner,"Create new or use existing Customer on new Quotation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
certificate,key,,certificate.key,Cryptographic Keys (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,currency,,res.currency,Currency (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,currency,rate,res.currency.rate,Currency Rate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,ui,view.custom,ir.ui.view.custom,Custom View (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos_self_order,custom_link,,pos_self_order.custom_link,Custom links that the restaurant can configure to be displayed on the self order screen (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,lot,report,stock.lot.report,Customer Lot Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,customer,statement.report.handler,account.customer.statement.report.handler,"Customer Statement Custom Handler (The base model, which is implicitly inherited by all models.)"
decimal,precision,,decimal.precision,Decimal Precision (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,default,,ir.default,Default Values (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
x_project_task_worksheet_template_1,,,x_project_task_worksheet_template_1,Default Worksheet (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,deferred,expense.report.handler,account.deferred.expense.report.handler,"Deferred Expense Custom Handler (The base model, which is implicitly inherited by all models.)"
account,deferred,report.handler,account.deferred.report.handler,"Deferred Expense Report Custom Handler (The base model, which is implicitly inherited by all models.)"
account,deferred,revenue.report.handler,account.deferred.revenue.report.handler,"Deferred Revenue Custom Handler (The base model, which is implicitly inherited by all models.)"
choose,delivery,carrier,choose.delivery.carrier,"Delivery Carrier Selection Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
choose,delivery,package,choose.delivery.package,"Delivery Package Selection Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
delivery,price,rule,delivery.price.rule,Delivery Price Rules (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
delivery,zip,prefix,delivery.zip.prefix,Delivery Zip Prefix (Zip prefix that a delivery.carrier will deliver to.)
ir,demo,,ir.demo,"Demo (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,demo_failure,wizard,ir.demo_failure.wizard,"Demo Failure wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,demo_failure,,ir.demo_failure,Demo failure (Stores modules for which we could not install demo data)
hr,departure,reason,hr.departure.reason,Departure Reason (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,departure,wizard,hr.departure.wizard,"Departure Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,device,log,res.device.log,Device Log (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,device,,res.device,Devices (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
digest,digest,,digest.digest,Digest (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
digest,tip,,digest.tip,Digest Tips (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,disallowed,expenses.category,account.disallowed.expenses.category,Disallowed Expenses Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,disallowed,expenses.report.handler,account.disallowed.expenses.report.handler,"Disallowed Expenses Custom Handler (The base model, which is implicitly inherited by all models.)"
account,disallowed,expenses.fleet.report.handler,account.disallowed.expenses.fleet.report.handler,"Disallowed Expenses Fleet Custom Handler (The base model, which is implicitly inherited by all models.)"
account,disallowed,expenses.rate,account.disallowed.expenses.rate,Disallowed Expenses Rate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,discount,sale.order.discount,"Discount Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
documents,access,,documents.access,Document / Partner (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,followers,,mail.followers,Document Followers (mail_followers holds the data related to the follow mechanism inside Odoo. Partners can choose to follow documents (records) of any kind that inherits from mail.thread. Following documents allow to receive notifications for new messages. A subscription is characterized by: :param: res_model: model of the followed objects :param: res_id: ID of resource (may be 0 for every objects))
documents,redirect,,documents.redirect,"Document Redirect (Model used to keep the old links valid after the 18.0 migration. Do *NOT* use that model or inherit from it, it will be removed in the future.)"
documents,request_wizard,,documents.request_wizard,"Document Request (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
documents,link_to_record_wizard,,documents.link_to_record_wizard,"Documents Link to Record (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
documents,mixin,,documents.mixin,"Documents creation mixin (Inherit this mixin to automatically create a `documents.document` when an `ir.attachment` is linked to a record and add the default values when creating a document related to the model that inherits from this mixin. Override this mixin's methods to specify an owner, a folder, tags or access_rights for the document. Note: this mixin can be disabled with the context variable """"no_document True"""".)"
documents,unlink,mixin,documents.unlink.mixin,Documents unlink mixin (Send the related documents to trash when the record is deleted.)
fleet,vehicle,assignation.log,fleet.vehicle.assignation.log,Drivers history on a vehicle (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,sale,extra.field,website.sale.extra.field,E-Commerce Extra Info Shown on product page (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,edi,xml.ubl_efff,account.edi.xml.ubl_efff,"E-FFF (BE) (The base model, which is implicitly inherited by all models.)"
account,ec,sales.report.handler,account.ec.sales.report.handler,"EC Sales Report Custom Handler (The base model, which is implicitly inherited by all models.)"
registration,editor,,registration.editor,"Edit Attendee Details on Sales Confirmation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
registration,editor,line,registration.editor.line,Edit Attendee Line on Sales Confirmation (Event Registration)
hr,payroll,edit.payslip.worked.days.line,hr.payroll.edit.payslip.worked.days.line,"Edit payslip line wizard worked days (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,payroll,edit.payslip.lines.wizard,hr.payroll.edit.payslip.lines.wizard,"Edit payslip lines wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,payroll,edit.payslip.line,hr.payroll.edit.payslip.line,"Edit payslip lines wizard line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mail,alias,,mail.alias,"Email Aliases (A Mail Alias is a mapping of an email address with a given Odoo Document model. It is used by Odoo's mail gateway when processing incoming emails sent to the system. If the recipient address (To) of the message matches a Mail Alias, the message will be either processed following the rules of that alias. If the message is a reply it will be attached to the existing discussion on the corresponding record, otherwise a new record of the corresponding model will be created. This is meant to be used in combination with a catch-all email configuration on the company's mail server, so that as soon as a new mail.alias is created, it becomes immediately usable and Odoo will accept email for it.)"
mail,alias,mixin,mail.alias.mixin,Email Aliases Mixin (A mixin for models that inherits mail.alias to have a one-to-one relation between the model and its alias.)
mail,alias,mixin.optional,mail.alias.mixin.optional,"Email Aliases Mixin (light) (A mixin for models that handles underlying 'mail.alias' records to use the mail gateway. Field is not mandatory and its creation is done dynamically based on given 'alias_name', allowing to gradually populate the alias table without having void aliases as when used with an inherits-like implementation.)"
mail,alias,domain,mail.alias.domain,"Email Domain (Model alias domains, now company-specific. Alias domains are email domains used to receive emails through catchall and bounce aliases, as well as using mail.alias records to redirect email replies. This replaces ``mail.alias.domain`` configuration parameter use until v16.)"
mail,template,preview,mail.template.preview,"Email Template Preview (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mail,template,,mail.template,Email Templates (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
mail,compose,message,mail.compose.message,Email composition wizard (Generic message composition wizard. You may inherit from this wizard at model and view levels to provide specific features. The behavior of the wizard depends on the composition_mode field: - 'comment': post on a record. - 'mass_mail': wizard in mass mailing mode where the mail details can contain template placeholders that will be merged with actual data before being sent to each recipient.)
mail,resend,message,mail.resend.message,"Email resend wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,embedded,actions,ir.embedded.actions,Embedded Actions (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,embed,,slide.embed,"Embedded Slides View Counter (Embedding in third party websites. Track view count, generate statistics.)"
hr,employee,category,hr.employee.category,Employee Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,employee,delete.wizard,hr.employee.delete.wizard,"Employee Delete Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,hr_skills,report_employee_cv,report.hr_skills.report_employee_cv,"Employee Resume (The base model, which is implicitly inherited by all models.)"
hr,employee,skill.report,hr.employee.skill.report,"Employee Skills Report (The base model, which is implicitly inherited by all models.)"
base,enable,profiling.wizard,base.enable.profiling.wizard,"Enable profiling for some time (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
calendar,alarm,,calendar.alarm,Event Alarm (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
calendar,alarm_manager,,calendar.alarm_manager,"Event Alarm Manager (The base model, which is implicitly inherited by all models.)"
event,mail,,event.mail,Event Automated Mailing (Event automated mailing. This model replaces all existing fields and configuration allowing to send emails on events since Odoo 9. A cron exists that periodically checks for mailing to run.)
event,event,configurator,event.event.configurator,"Event Configurator (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
event,lead,request,event.lead.request,"Event Lead Request (Technical model created when a user requests 'leads generation' on an event based on all existing event.lead.rules (see event#action_generate_leads). As an event can hold a lot of registrations, we use a batch approach with a separate model that contains the batching logic method and the field to retain progress. To benefit from a background processing, we use a CRON that calls itself with a CRON trigger until the batch is completed, which unlinks this technical generation record.)"
event,lead,rule,event.lead.rule,"Event Lead Rules (Rule model for creating / updating leads from event registrations. SPECIFICATIONS: CREATION TYPE There are two types of lead creation: * per attendee: create a lead for each registration; * per order: create a lead for a group of registrations; The last one is only available through interface if it is possible to register a group of attendees in one action (when event_sale or website_event are installed). Behavior itself is implemented directly in event_crm. Basically a group is either a list of registrations belonging to the same event and created in batch (website_event flow). With event_sale this definition will be improved to be based on sale_order. SPECIFICATIONS: CREATION TRIGGERS There are three options to trigger lead creation. We consider basically that lead quality increases if attendees confirmed or went to the event. Triggers allow therefore to run rules: * at attendee creation; * at attendee confirmation; * at attendee venue; This trigger defines when the rule will run. SPECIFICATIONS: FILTERING REGISTRATIONS When a batch of registrations matches the rule trigger we filter them based on conditions and rules defines on event_lead_rule model. Heuristic is the following: * the rule is active; * if a filter is set: filter registrations based on this filter. This is done like a search, and filter is a domain; * if a company is set on the rule, it must match event's company. Note that multi-company rules apply on event_lead_rule; * if an event category it set, it must match; * if an event is set, it must match; * if both event and category are set, one of them must match (OR). If none of those are set, it is considered as OK; If conditions are met, leads are created with pre-filled informations defined on the rule (type, user_id, team_id). Contact information coming from the registrations are computed (customer, name, email, phone, contact_name). SPECIFICATIONS: OTHER POINTS Note that all rules matching their conditions are applied. This means more than one lead can be created depending on the configuration. This is intended in order to give more freedom to the user using the automatic lead generation.)"
calendar,event,type,calendar.event.type,Event Meeting Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,question,,event.question,Event Question (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,question,answer,event.question.answer,Event Question Answer (Contains suggested answers to a 'simple_choice' event.question.)
calendar,recurrence,,calendar.recurrence,Event Recurrence Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,registration,answer,event.registration.answer,Event Registration Answer (Represents the user input answer for a single event.question)
event,sale,report,event.sale.report,"Event Sales Report (Event Registrations-based sales report, allowing to analyze sales and number of seats by event (type), ticket, etc. Each opened record will also give access to all this information.)"
event,sponsor,type,event.sponsor.type,Event Sponsor Level (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,stage,,event.stage,Event Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,tag,,event.tag,Event Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,tag,category,event.tag.category,Event Tag Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,type,,event.type,Event Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,type,ticket,event.type.ticket,Event Template Ticket (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,event,ticket,event.event.ticket,"Event Ticket (Ticket model allowing to have different kind of registrations for a given event. Ticket are based on ticket type as they share some common fields and behavior. Those models come from <  v13 Odoo event.event.ticket that modeled both concept: tickets for event templates, and tickets for events.)"
event,track,location,event.track.location,Event Track Location (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,track,stage,event.track.stage,Event Track Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,track,tag,event.track.tag,Event Track Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
event,track,tag.category,event.track.tag.category,Event Track Tag Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,expense,approve.duplicate,hr.expense.approve.duplicate,Expense Approve Duplicate (This wizard is shown whenever an approved expense is similar to one being approved. The user has the opportunity to still validate it or decline.)
hr,expense,refuse.wizard,hr.expense.refuse.wizard,Expense Refuse Reason Wizard (Wizard to specify reason on expense sheet refusal)
hr,expense,split,hr.expense.split,"Expense Split (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,expense,split.wizard,hr.expense.split.wizard,"Expense Split Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account_reports,export,wizard.format,account_reports.export.wizard.format,"Export format for accounting's reports (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account_reports,export,wizard,account_reports.export.wizard,"Export wizard for accounting's reports (Extends the report export wizard to give it the ability to save the attachments it generates as documents, in a folder of the Documents app.)"
ir,exports,,ir.exports,Exports (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,exports,line,ir.exports.line,Exports Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,invoice_extract,words,account.invoice_extract.words,Extracted words from invoice scan (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,project,task.user.fsm,report.project.task.user.fsm,FSM Tasks Analysis (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,edi,xml.cii,account.edi.xml.cii,"Factur-x/XRechnung CII 2.2.0 (The base model, which is implicitly inherited by all models.)"
knowledge,article,favorite,knowledge.article.favorite,Favorite Article (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
html,field,history.mixin,html.field.history.mixin,"Field html History (The base model, which is implicitly inherited by all models.)"
ir,model,fields,ir.model.fields,Fields (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
ir,fields,converter,ir.fields.converter,"Fields Converter (The base model, which is implicitly inherited by all models.)"
ir,model,fields.selection,ir.model.fields.selection,Fields Selection (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,lead,scoring.frequency.field,crm.lead.scoring.frequency.field,Fields that can be used for predictive lead scoring computation (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,binary,,ir.binary,"File streaming helper model for controllers (The base model, which is implicitly inherited by all models.)"
ir,filters,,ir.filters,Filters (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
account,fiscal,position,account.fiscal.position,Fiscal Position (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,fiscal,year,account.fiscal.year,Fiscal Year (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,cost.report,fleet.vehicle.cost.report,Fleet Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,service,type,fleet.service.type,Fleet Service Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,followup,report.handler,account.followup.report.handler,"Follow-Up Report Custom Handler (The base model, which is implicitly inherited by all models.)"
account_followup,followup,line,account_followup.followup.line,Follow-up Criteria (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,followup,report,account.followup.report,"Follow-up Report (The base model, which is implicitly inherited by all models.)"
account_followup,missing,information.wizard,account_followup.missing.information.wizard,"Followup missing information wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,pdf,form.field,sale.pdf.form.field,Form fields of inside quotation documents. (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
snailmail,letter,format.error,snailmail.letter.format.error,"Format Error Sending a Snailmail Letter (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,full,reconcile,account.full.reconcile,Full Reconcile (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
gamification,goal,,gamification.goal,Gamification Goal (Goal instance for a user An individual goal for a user on a specified time period)
gamification,goal,definition,gamification.goal.definition,Gamification Goal Definition (Goal definition A goal definition contains the way to evaluate an objective Each module wanting to be able to set goals to the users needs to create a new gamification_goal_definition)
gamification,goal,wizard,gamification.goal.wizard,Gamification Goal Wizard (Wizard to update a manual goal)
gamification,badge,user,gamification.badge.user,Gamification User Badge (User having received a badge)
gamification,badge,user.wizard,gamification.badge.user.wizard,Gamification User Badge Wizard (Wizard allowing to grant a badge to a user)
gamification,challenge,line,gamification.challenge.line,Gamification generic goal for challenge (Gamification challenge line Predefined goal for 'gamification_challenge' These are generic list of goals with only the target goal defined Should only be created for the gamification.challenge object)
account,general,ledger.report.handler,account.general.ledger.report.handler,"General Ledger Custom Handler (The base model, which is implicitly inherited by all models.)"
loyalty,generate,wizard,loyalty.generate.wizard,"Generate Coupons (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
payment,link,wizard,payment.link.wizard,"Generate Sales Payment Link (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,payslip,employees,hr.payslip.employees,"Generate payslips for all selected employees (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,leave,allocation.generate.multi.wizard,hr.leave.allocation.generate.multi.wizard,"Generate time off allocations for multiple employees (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,leave,generate.multi.wizard,hr.leave.generate.multi.wizard,"Generate time off for multiple employees (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,generic,tax.report.handler,account.generic.tax.report.handler,"Generic Tax Report Custom Handler (The base model, which is implicitly inherited by all models.)"
account,generic,tax.report.handler.account.tax,account.generic.tax.report.handler.account.tax,"Generic Tax Report Custom Handler (Account -> Tax) (The base model, which is implicitly inherited by all models.)"
account,generic,tax.report.handler.tax.account,account.generic.tax.report.handler.tax.account,"Generic Tax Report Custom Handler (Tax -> Account) (The base model, which is implicitly inherited by all models.)"
base,geocoder,,base.geocoder,Geo Coder (Abstract class used to call Geolocalization API and convert addresses into GPS coordinates.)
base,geo_provider,,base.geo_provider,Geo Provider (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,lead,lost,crm.lead.lost,"Get Lost Reason (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
applicant,get,refuse.reason,applicant.get.refuse.reason,"Get Refuse Reason (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,account,report_hash_integrity,report.account.report_hash_integrity,"Get hash integrity result as PDF. (The base model, which is implicitly inherited by all models.)"
google,calendar,account.reset,google.calendar.account.reset,"Google Calendar Account Reset (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
google,gmail,mixin,google.gmail.mixin,"Google Gmail Mixin (The base model, which is implicitly inherited by all models.)"
google,service,,google.service,"Google Service (The base model, which is implicitly inherited by all models.)"
portal,wizard,,portal.wizard,Grant Portal Access (A wizard to manage the creation/removal of portal users.)
spreadsheet,dashboard,group,spreadsheet.dashboard.group,Group of dashboards (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,guest,,mail.guest,Guest (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,payment.report.wizard,hr.payroll.payment.report.wizard,"HR Payroll Payment Report Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,holidays,summary.employee,hr.holidays.summary.employee,"HR Time Off Summary Report By Employee (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,work,entry,hr.work.entry,HR Work Entry (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,work,entry.type,hr.work.entry.type,HR Work Entry Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,http,,ir.http,HTTP Routing (Augment ir.http to update the last connection date when the session is loaded.)
hr,payroll,headcount.line,hr.payroll.headcount.line,Headcount Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
loyalty,history,,loyalty.history,History for Loyalty cards and Ewallets (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,hr_holidays,report_holidayssummary,report.hr_holidays.report_holidayssummary,"Holidays Summary Report (The base model, which is implicitly inherited by all models.)"
account,report,horizontal.group,account.report.horizontal.group,Horizontal group for reports (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,report,horizontal.group.rule,account.report.horizontal.group.rule,Horizontal group rule for reports (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,manager,department.report,hr.manager.department.report,"Hr Manager Department Report (The base model, which is implicitly inherited by all models.)"
iap,enrich,api,iap.enrich.api,"IAP Lead Enrichment API (The base model, which is implicitly inherited by all models.)"
iap,autocomplete,api,iap.autocomplete.api,"IAP Partner Autocomplete API (The base model, which is implicitly inherited by all models.)"
iap,service,,iap.service,IAP Service (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,ice,server,mail.ice.server,ICE server (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
iot,device,,iot.device,IOT Device (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
iot,trigger,,iot.trigger,IOT Trigger (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
image,mixin,,image.mixin,"Image Mixin (The base model, which is implicitly inherited by all models.)"
base,import,module,base.import.module,Import Module (Import Module)
fetchmail,server,,fetchmail.server,Incoming Mail Server (Incoming POP/IMAP mail server account)
account,incoterms,,account.incoterms,Incoterms (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,index,hr.payroll.index,"Index contracts (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,partner,industry,res.partner.industry,Industry (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
base,language,install,base.language.install,"Install Language (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,inventory,adjustment.name,stock.inventory.adjustment.name,"Inventory Adjustment Reference / Reason (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,inventory,warning,stock.inventory.warning,"Inventory Adjustment Warning (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,location,,stock.location,Inventory Locations (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,route,,stock.route,Inventory Routes (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,wizard,invite,mail.wizard.invite,Invite wizard (Wizard to invite partners (or channels) and make them followers.)
account,invoice,report,account.invoice.report,Invoices Statistics (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
iot,box,,iot.box,IoT Box (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,job,platform,hr.job.platform,Job Platforms (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,move,line,account.move.line,Journal Item (Override AccountInvoice_line to add the link to the purchase order line it is related to)
account,journal,report.handler,account.journal.report.handler,"Journal Report Custom Handler (The base model, which is implicitly inherited by all models.)"
documents,account,folder.setting,documents.account.folder.setting,Journal and Folder settings (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
iot,keyboard,layout,iot.keyboard.layout,Keyboard Layout (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
knowledge,cover,,knowledge.cover,Knowledge Cover (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
knowledge,invite,,knowledge.invite,"Knowledge Invite Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
knowledge,article,stage,knowledge.article.stage,Knowledge Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
base,language,export,base.language.export,"Language Export (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
base,language,import,base.language.import,"Language Import (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,lang,,res.lang,Languages (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
crm,lead,scoring.frequency,crm.lead.scoring.frequency,Lead Scoring Frequency (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,consumption,warning.line,mrp.consumption.warning.line,"Line of issue consumption (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
bank,rec,widget.line,bank.rec.widget.line,Line of the bank reconciliation widget (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fsm,stock,tracking.line,fsm.stock.tracking.line,"Lines for FSM Stock Tracking (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,tracker,,sms.tracker,"Link SMS to mailing/sms tracking models (Relationship between a sent SMS and tracking records such as notifications and traces. This model acts as an extension of a `mail.notification` or a `mailing.trace` and allows to update those based on the SMS provider responses both at sending and when later receiving sent/delivery reports (see `SmsController`). SMS trackers are supposed to be created manually when necessary, and tied to their related SMS through the SMS UUID field. (They are not tied to the SMS records directly as those can be deleted when sent). Note: Only admins/system user should need to access (a fortiori modify) these technical records so no """"sudo"""" is used nor should be required here.)"
link,tracker,,link.tracker,Link Tracker (Link trackers allow users to wrap any URL into a short URL that can be tracked by Odoo. Clicks are counter on each link. A tracker is linked to UTMs allowing to analyze marketing actions. This model is also used in mass_mailing where each link in html body is automatically converted into a short link that is tracked and integrates UTMs.)
link,tracker,click,link.tracker.click,Link Tracker Click (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
link,tracker,code,link.tracker.code,Link Tracker Code (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,bank,selection,account.bank.selection,"Link a bank account to the selected journal (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
worksheet,template,load.wizard,worksheet.template.load.wizard,"Load the worksheet template (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,loan,compute.wizard,account.loan.compute.wizard,"Loan Compute Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,loan,line,account.loan.line,Loan Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,logging,,ir.logging,Logging (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,stock,label_lot_template_view,report.stock.label_lot_template_view,"Lot Label Report (The base model, which is implicitly inherited by all models.)"
loyalty,mail,,loyalty.mail,Loyalty Communication (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
loyalty,program,,loyalty.program,Loyalty Program (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
loyalty,reward,,loyalty.reward,Loyalty Reward (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
loyalty,rule,,loyalty.rule,Loyalty Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,mrp,report_mo_overview,report.mrp.report_mo_overview,"MO Overview Report (The base model, which is implicitly inherited by all models.)"
report,mrp_account_enterprise,mrp_cost_structure,report.mrp_account_enterprise.mrp_cost_structure,"MRP Cost Structure Report (The base model, which is implicitly inherited by all models.)"
mrp,workcenter,productivity.loss.type,mrp.workcenter.productivity.loss.type,MRP Workorder productivity losses (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,bot,,mail.bot,"Mail Bot (The base model, which is implicitly inherited by all models.)"
mail,composer,mixin,mail.composer.mixin,"Mail Composer Mixin (Mixin used to edit and render some fields used when sending emails or notifications based on a mail template. Main current purpose is to hide details related to subject and body computation and rendering based on a mail.template. It also give the base tools to control who is allowed to edit body, notably when dealing with templating language like inline_template or qweb. It is meant to evolve in a near future with upcoming support of qweb and fine grain control of rendering access.)"
mail,gateway,allowed,mail.gateway.allowed,"Mail Gateway Allowed (List of trusted email address which won't have the quota restriction. The incoming emails have a restriction of the number of records they can create with alias, defined by the 2 systems parameters; - mail.gateway.loop.minutes - mail.gateway.loop.threshold But we might have some legit use cases for which we want to receive a ton of emails from an automated-source. This model stores those trusted source and this restriction won't apply to them.)"
discuss,channel,rtc.session,discuss.channel.rtc.session,Mail RTC session (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,render,mixin,mail.render.mixin,"Mail Render Mixin (The base model, which is implicitly inherited by all models.)"
event,type,mail,event.type.mail,Mail Scheduling on Event Category (Template of event.mail to attach to event.type. Those will be copied upon all events created in that type to ease event creation.)
ir,mail_server,,ir.mail_server,"Mail Server (Represents an SMTP server, able to send outgoing emails, with SSL and TLS capabilities.)"
mail,template,reset,mail.template.reset,"Mail Template Reset (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mail,tracking,value,mail.tracking.value,Mail Tracking Value (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mailing,contact,import,mailing.contact.import,"Mailing Contact Import (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mailing,filter,,mailing.filter,Mailing Favorite Filters (This model stores mass mailing or marketing campaign domain as filters (quite similar to 'ir.filters' but dedicated to mailing apps). Frequently used domains can be reused easily.)
mailing,list,,mailing.list,Mailing List (Model of a contact list.)
mailing,subscription,,mailing.subscription,Mailing List Subscription (Intermediate model between mass mailing list and mass mailing contact Indicates if a contact is opted out for a particular list)
mailing,trace,,mailing.trace,"Mailing Statistics (MailingTrace models the statistics collected about emails. Those statistics are stored in a separated model and table to avoid bloating the mail_mail table with statistics values. This also allows to delete emails send with mass mailing without loosing the statistics about them. Note:: State management / Error codes / Failure types summary * trace_status 'outgoing', 'process', 'pending', 'sent', 'opened', 'replied', 'error', 'bounce', 'cancel' * failure_type # generic 'unknown', # mass_mailing """"mail_email_invalid"""", """"mail_smtp"""", """"mail_email_missing"""", """"mail_from_invalid"""", """"mail_from_missing"""", # mass mailing mass mode specific codes """"mail_bl"""", """"mail_optout"""", """"mail_dup"""" # mass_mailing_sms 'sms_number_missing', 'sms_number_format', 'sms_credit', 'sms_server', 'sms_acc', 'sms_country_not_supported', 'sms_registration_needed', # mass_mailing_sms mass mode specific codes 'sms_blacklist', 'sms_duplicate', 'sms_optout', * cancel: * mail: set in _prepare_mail_values in composer, if email is blacklisted (mail) or in opt_out / seen list (mass_mailing) or email_to is void or incorrectly formatted (mass_mailing) - based on mail cancel state * sms: set in _prepare_mass_sms_trace_values in composer if sms is in cancel state; either blacklisted (sms) or in opt_out / seen list (sms); * void mail / void sms number -> error (mail_missing, sms_number_missing) * invalid mail / invalid sms number -> error (RECIPIENT, sms_number_format) * exception: set in _postprocess_sent_message (_postprocess_iap_sent_sms) if mail (sms) not sent with failure type, reset if sent; * process: (used in sms): set in SmsTracker._update_sms_traces when held back (at IAP) before actual sending to the sms_service. * pending: (used in sms): default value for sent sms. * sent: set in * _postprocess_sent_message if mail * SmsTracker._update_sms_traces if sms, when delivery report is received. * clicked: triggered by add_click * opened: triggered by add_click + blank gif (mail) + gateway reply (mail) * replied: triggered by gateway reply (mail) * bounced: triggered by gateway bounce (mail) or in _prepare_mass_sms_trace_values if sms_number_format error when sending sms (sms))"
mailing,subscription,optout,mailing.subscription.optout,Mailing Subscription Reason (Reason for opting out of mailing lists or for blacklisting.)
account,report,file.download.error.wizard,account.report.file.download.error.wizard,"Manage the file generation errors from report exports. (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,leave,mandatory.day,hr.leave.mandatory.day,Mandatory Day (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,report,,mrp.report,Manufacturing Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,code,mapping,account.code.mapping,Mapping of account codes per company (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
card,card,,card.card,Marketing Card (Mapping from a unique ID to a 'sharer' of a campaign. Storing state of sharing and their specific card.)
card,campaign,tag,card.campaign.tag,Marketing Card Campaign Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
card,template,,card.template,Marketing Card Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mailing,trace,report,mailing.trace.report,Mass Mailing Statistics (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
calendar,booking,,calendar.booking,"Meeting Booking (This model is only used to store appointment informations for bookings WITH PAYMENT When we consider it is paid, the calendar event is created and GC will remove the booking.)"
calendar,booking,line,calendar.booking.line,Meeting Resource Booking (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,ui,menu,ir.ui.menu,Menu (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
mailing,list,merge,mailing.list.merge,"Merge Mass Mailing List (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
crm,merge,opportunity,crm.merge.opportunity,"Merge Opportunities (Merge opportunities together. If we're talking about opportunities, it's just because it makes more sense to merge opps than leads, because the leads are more ephemeral objects. But since opportunities are leads, it's also possible to merge leads together (resulting in a new lead), or leads and opps together (resulting in a new opp).)"
base,partner,merge.line,base.partner.merge.line,"Merge Partner Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
base,partner,merge.automatic.wizard,base.partner.merge.automatic.wizard,"Merge Partner Wizard (The idea behind this wizard is to create a list of potential partners to merge. We use two objects, the first one is the wizard for the end-user. And the second will contain the partner list to merge.)"
hr_timesheet,merge,wizard,hr_timesheet.merge.wizard,"Merge Timesheets (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mail,message,,mail.message,"Message (Override MailMessage class in order to add a new type: SMS messages. Those messages comes with their own notification method, using SMS gateway.)"
mail,notification,,mail.notification,Message Notifications (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,message,reaction,mail.message.reaction,Message Reaction (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,message,translation,mail.message.translation,Message Translation (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,message,subtype,mail.message.subtype,"Message subtypes (Class holding subtype definition for messages. Subtypes allow to tune the follower subscription, allowing only some subtypes to be pushed on the Wall.)"
discuss,voice,metadata,discuss.voice.metadata,Metadata for voice attachments (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n_mx,report,handler,l10n_mx.report.handler,"Mexican Account Report Custom Handler (The base model, which is implicitly inherited by all models.)"
l10n_mx_edi,document,,l10n_mx_edi.document,Mexican documents that needs to transit outside of Odoo (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,warehouse,orderpoint,stock.warehouse.orderpoint,Minimum Inventory Rule (Defines Minimum stock rules.)
mail,tracking,duration.mixin,mail.tracking.duration.mixin,"Mixin to compute the time a record has spent in each value a many2one field can take (The base model, which is implicitly inherited by all models.)"
ir,model,access,ir.model.access,Model Access (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
ir,model,constraint,ir.model.constraint,Model Constraint (This model tracks PostgreSQL foreign keys and constraints used by Odoo models.)
ir,model,data,ir.model.data,"Model Data (Holds external identifier keys for records in the database. This has two main uses: * allows easy data integration with third-party systems, making import/export/sync of data possible, as records can be uniquely identified across multiple systems * allows tracking the origin of data installed by Odoo modules themselves, thus making it possible to later update them seamlessly.)"
ir,model,inherit,ir.model.inherit,Model Inheritance Tree (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,controller,page,website.controller.page,Model Page (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
report,hr_payroll,contribution_register,report.hr_payroll.contribution_register,"Model for Printing hr.payslip.line grouped by register (The base model, which is implicitly inherited by all models.)"
ir,model,,ir.model,Models (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
asset,modify,,asset.modify,"Modify Asset (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,module,module,ir.module.module,Module (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
base,module,install.request,base.module.install.request,"Module Activation Request (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
base,module,install.review,base.module.install.review,"Module Activation Review (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,base,report_irmodulereference,report.base.report_irmodulereference,"Module Reference Report (base) (The base model, which is implicitly inherited by all models.)"
base,module,uninstall,base.module.uninstall,"Module Uninstall (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,module,module.dependency,ir.module.module.dependency,Module dependency (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,module,module.exclusion,ir.module.module.exclusion,Module exclusion (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,multi,mixin,website.multi.mixin,"Multi Website Mixin (The base model, which is implicitly inherited by all models.)"
website,published,multi.mixin,website.published.multi.mixin,"Multi Website Published Mixin (The base model, which is implicitly inherited by all models.)"
account,multicurrency,revaluation.report.handler,account.multicurrency.revaluation.report.handler,"Multicurrency Revaluation Report Custom Handler (Manage Unrealized Gains/Losses. In multi-currencies environments, we need a way to control the risk related to currencies (in case some are higthly fluctuating) and, in some countries, some laws also require to create journal entries to record the provisionning of a probable future expense related to currencies. Hence, people need to create a journal entry at the beginning of a period, to make visible the probable expense in reports (and revert it at the end of the period, to recon the real gain/loss.)"
account,multicurrency,revaluation.wizard,account.multicurrency.revaluation.wizard,"Multicurrency Revaluation Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
fleet,vehicle,odometer,fleet.vehicle.odometer,Odometer log for a vehicle (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
onboarding,onboarding,,onboarding.onboarding,Onboarding (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
onboarding,progress,step,onboarding.progress.step,Onboarding Progress Step Tracker (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
onboarding,progress,,onboarding.progress,Onboarding Progress Tracker (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
onboarding,onboarding,step,onboarding.onboarding.step,Onboarding Step (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,financial,year.op,account.financial.year.op,"Opening Balance of Financial Year (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
crm,lost,reason,crm.lost.reason,Opp. Lost Reason (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,mail,,mail.mail,Outgoing Mails (Add the mass mailing campaign data to mail)
sms,sms,,sms.sms,Outgoing SMS (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,quant,package,stock.quant.package,Packages (Packages containing quants and/or other packages)
website,page,,website.page,Page (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,page,properties,website.page.properties,"Page Properties (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
website,page,properties.base,website.page.properties.base,"Page Properties Base (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,paperformat,,report.paperformat,Paper Format Config (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
account,partial,reconcile,account.partial.reconcile,Partial Reconcile (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,partner,autocomplete.sync,res.partner.autocomplete.sync,Partner Autocomplete Sync (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,partner,ledger.report.handler,account.partner.ledger.report.handler,"Partner Ledger Custom Handler (The base model, which is implicitly inherited by all models.)"
res,partner,category,res.partner.category,Partner Tags (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,partner,title,res.partner.title,Partner Title (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,reconcile,model.partner.mapping,account.reconcile.model.partner.mapping,Partner mapping for reconciliation models (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,resend,partner,mail.resend.partner,"Partner with additional information for mail resend (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,users,identitycheck,res.users.identitycheck,"Password Check Wizard (Wizard used to re-check the user's credentials (password) and eventually revoke access to his account to every device he has an active session on. Might be useful before the more security-sensitive operations, users might be leaving their computer unlocked & unattended. Re-checking credentials mitigates some of the risk of a third party using such an unattended device to manipulate the account.)"
account,payment,register,account.payment.register,"Pay (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
payment,capture,wizard,payment.capture.wizard,"Payment Capture Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
payment,method,,payment.method,Payment Method (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n_mx_edi,payment,method,l10n_mx_edi.payment.method,"Payment Method for Mexico from SAT Data (Payment Method for Mexico from SAT Data. Electronic documents need this information from such data. Here the `xsd <goo.gl/Vk3IF1>`_ The payment method is an required attribute, to express the payment method of assets or services covered by the voucher. It is understood as a payment method legends such as check, credit card or debit card, deposit account, etc. Note: Odoo have the model payment.method, but this model need fields that we not need in this feature as partner_id, acquirer, etc., and they are there with other purpose, then a new model is necessary in order to avoid lose odoo's features)"
account,payment,method.line,account.payment.method.line,Payment Methods (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,payment,method,account.payment.method,Payment Methods (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
payment,provider,,payment.provider,Payment Provider (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
payment,refund,wizard,payment.refund.wizard,"Payment Refund Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,payment,term,account.payment.term,Payment Terms (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,payment,term.line,account.payment.term.line,Payment Terms Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
payment,token,,payment.token,Payment Token (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
payment,transaction,,payment.transaction,Payment Transaction (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
payment,provider,onboarding.wizard,payment.provider.onboarding.wizard,"Payment provider onboarding wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,payroll,report,hr.payroll.report,Payroll Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,dashboard.warning,hr.payroll.dashboard.warning,Payroll Dashboard Warning (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,declaration.mixin,hr.payroll.declaration.mixin,"Payroll Declaration Mixin (The base model, which is implicitly inherited by all models.)"
hr,payroll,employee.declaration,hr.payroll.employee.declaration,Payroll Employee Declaration (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,headcount,hr.payroll.headcount,Payroll Headcount (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,note,hr.payroll.note,Payroll Note (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,input,hr.payslip.input,Payslip Input (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,input.type,hr.payslip.input.type,Payslip Input Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,line,hr.payslip.line,Payslip Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payslip,worked_days,hr.payslip.worked_days,Payslip Worked Days (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,task,stage.personal,project.task.stage.personal,Personal Task Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,picking,type,stock.picking.type,Picking Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,note,,pos.note,PoS Note (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,load,mixin,pos.load.mixin,"PoS data loading mixin (The base model, which is implicitly inherited by all models.)"
pos,category,,pos.category,Point of Sale Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,config,,pos.config,Point of Sale Configuration (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,daily,sales.reports.wizard,pos.daily.sales.reports.wizard,"Point of Sale Daily Report (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,point_of_sale,report_saledetails,report.point_of_sale.report_saledetails,"Point of Sale Details (The base model, which is implicitly inherited by all models.)"
pos,details,wizard,pos.details.wizard,"Point of Sale Details Report (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,point_of_sale,report_invoice,report.point_of_sale.report_invoice,"Point of Sale Invoice Report (The base model, which is implicitly inherited by all models.)"
pos,make,payment,pos.make.payment,"Point of Sale Make Payment Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
pos,order,line,pos.order.line,Point of Sale Order Lines (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,pos,order,report.pos.order,Point of Sale Orders Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,payment,method,pos.payment.method,Point of Sale Payment Methods (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,payment,,pos.payment,Point of Sale Payments (Used to register payments made in a pos.order. See `payment_ids` field of pos.order model. The main characteristics of pos.payment can be read from `payment_method_id`.)
pos,printer,,pos.printer,Point of Sale Printer (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos_preparation_display,orderline,,pos_preparation_display.orderline,Point of Sale preparation order line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos_preparation_display,stage,,pos_preparation_display.stage,Point of Sale preparation stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
portal,mixin,,portal.mixin,"Portal Mixin (The base model, which is implicitly inherited by all models.)"
portal,share,,portal.share,"Portal Sharing (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
portal,wizard,user,portal.wizard.user,Portal User Config (A model to configure users in the portal wizard.)
pos_preparation_display,display,,pos_preparation_display.display,Preparation display (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos_preparation_display,order,,pos_preparation_display.order,Preparation orders (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,preview,,whatsapp.preview,"Preview template (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,product,report_pricelist,report.product.report_pricelist,"Pricelist Report (The base model, which is implicitly inherited by all models.)"
product,pricelist,item,product.pricelist.item,Pricelist Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,subscription,pricing,sale.subscription.pricing,Pricing rule of subscription products (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,employee,cv.wizard,hr.employee.cv.wizard,"Print Resume (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
privacy,log,,privacy.log,Privacy Log (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
privacy,lookup,wizard,privacy.lookup.wizard,"Privacy Lookup Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
privacy,lookup,wizard.line,privacy.lookup.wizard.line,"Privacy Lookup Wizard Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
procurement,group,,procurement.group,"Procurement Group (The procurement group class is used to group products together when computing procurements. (tasks, physical products, ...) The goal is that when you have one sales order of several products and the products are pulled from the same or several location(s), to keep having the moves grouped into pickings that represent the sales order. Used in: sales order (to group delivery order lines like the so), pull/push rules (to pack like the delivery order), on orderpoints (e.g. for wave picking all the similar products together). Grouping is made only if the source and the destination is the same. Suppose you have 4 lines on a picking from Output where 2 lines will need to come from Input (crossdock) and 2 lines coming from Stock -> Output As the four will have the same group ids from the SO, the move from input will have a stock.picking with 2 grouped lines and the move from stock will have 2 grouped lines also. The name is usually the name of the original document (sales order) or a sequence computed if created manually.)"
mrp,batch,produce,mrp.batch.produce,"Produce a batch of production order (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
product,attribute,,product.attribute,Product Attribute (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,attribute,custom.value,product.attribute.custom.value,Product Attribute Custom Value (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,catalog,mixin,product.catalog.mixin,Product Catalog Mixin (This mixin should be inherited when the model should be able to work with the product catalog. It assumes the model using this mixin has a O2M field where the products are added/removed and this field's co-related model should has a method named `_get_product_catalog_lines_data`.)
product,combo,,product.combo,Product Combo (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,combo,item,product.combo.item,Product Combo Item (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,document,,product.document,Product Document (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,image,,product.image,Product Image (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,product,report_producttemplatelabel_dymo,report.product.report_producttemplatelabel_dymo,"Product Label Report (The base model, which is implicitly inherited by all models.)"
report,stock,label_product_product_view,report.stock.label_product_product_view,"Product Label Report (The base model, which is implicitly inherited by all models.)"
report,product,report_producttemplatelabel2x7,report.product.report_producttemplatelabel2x7,"Product Label Report 2x7 (The base model, which is implicitly inherited by all models.)"
report,product,report_producttemplatelabel4x12,report.product.report_producttemplatelabel4x12,"Product Label Report 4x12 (The base model, which is implicitly inherited by all models.)"
report,product,report_producttemplatelabel4x12noprice,report.product.report_producttemplatelabel4x12noprice,"Product Label Report 4x12 No Price (The base model, which is implicitly inherited by all models.)"
report,product,report_producttemplatelabel4x7,report.product.report_producttemplatelabel4x7,"Product Label Report 4x7 (The base model, which is implicitly inherited by all models.)"
stock,move,line,stock.move.line,Product Moves (Stock Move Line) (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,packaging,,product.packaging,Product Packaging (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,replenish,,product.replenish,"Product Replenish (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,replenish,mixin,stock.replenish.mixin,"Product Replenish Mixin (The base model, which is implicitly inherited by all models.)"
product,tag,,product.tag,Product Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,template,attribute.exclusion,product.template.attribute.exclusion,Product Template Attribute Exclusion (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,template,attribute.line,product.template.attribute.line,Product Template Attribute Line (Attributes available on product.template with their selected values in a m2m. Used as a configuration model to generate the appropriate product.template.attribute.value)
product,template,attribute.value,product.template.attribute.value,Product Template Attribute Value (Materialized relationship between attribute values and product template generated by the product.template.attribute.line)
report,mrp_account_enterprise,product_template_cost_structure,report.mrp_account_enterprise.product_template_cost_structure,"Product Template Cost Structure Report (The base model, which is implicitly inherited by all models.)"
uom,uom,,uom.uom,Product Unit of Measure (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
uom,category,,uom.category,Product UoM Categories (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,unspsc,code,product.unspsc.code,"Product and UOM Codes from UNSPSC (Product and UoM codes defined by UNSPSC Used by Mexico, Peru, Colombia and Denmark localizations)"
product,ribbon,,product.ribbon,Product ribbon (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,cron,progress,ir.cron.progress,Progress of Scheduled Actions (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,sale,line.employee.map,project.sale.line.employee.map,"Project Sales line, employee mapping (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)"
project,share,wizard,project.share.wizard,"Project Sharing (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,share,collaborator.wizard,project.share.collaborator.wizard,"Project Sharing Collaborator Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,project,stage,project.project.stage,Project Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,project,stage.delete.wizard,project.project.stage.delete.wizard,"Project Stage Delete Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,tags,,project.tags,Project Tags (Tags of project's tasks)
project,task,type.delete.wizard,project.task.type.delete.wizard,"Project Task Stage Delete Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
propose,change,,propose.change,"Propose a change in the production (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
hr,employee,public,hr.employee.public,Public Employee (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
publisher_warranty,contract,,publisher_warranty.contract,"Publisher Warranty Contract For IoT Box (The base model, which is implicitly inherited by all models.)"
purchase,bill,line.match,purchase.bill.line.match,Purchase Line and Vendor Bill line matching view (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
purchase,order,line,purchase.order.line,Purchase Order Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
purchase,report,,purchase.report,Purchase Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
purchase,bill,union,purchase.bill.union,Purchases & Bills Union (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,push,device,mail.push.device,Push Notification Device (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,push,,mail.push,Push Notifications (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,visitor,push.subscription,website.visitor.push.subscription,"Push Subscription for a Website Visitor (Contains the char push_token of a website.visitor's push subscription. Push subscriptions are created when a visitor accepts to receive 'Web Push Notifications' on its browser. This token is used by the firebase service to send notifications to that browser. A visitor can have multiple push subscriptions if they use several devices / browsers. (push_subscriptions are 'merged' onto the main visitor, see website.visitor#_merge_visitor for more information.))"
stock,putaway,rule,stock.putaway.rule,Putaway Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,qweb,field.time,ir.qweb.field.time,"QWeb Field Time (``time`` converter, to display integer or fractional value as human-readable time (e.g. 1.5 as """"1:30 AM""""). The unit of this value is in hours. Can be used on any numerical field between: 0 <  value < 24)"
quality,alert,stage,quality.alert.stage,Quality Alert Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,point,test_type,quality.point.test_type,Quality Control Test Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quality,tag,,quality.tag,Quality Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,quant,,stock.quant,Quants (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,spreadsheet,sale.order.spreadsheet,Quotation Spreadsheet (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,template,sale.order.template,Quotation Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,template.line,sale.order.template.line,Quotation Template Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,template.option,sale.order.template.option,Quotation Template Option (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
quotation,document,,quotation.document,Quotation's Headers & Footers (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,qweb,,ir.qweb,Qweb (IrQWeb object for rendering stuff in the website context)
ir,qweb,field,ir.qweb.field,"Qweb Field (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.barcode,ir.qweb.field.barcode,"Qweb Field Barcode (``barcode`` widget rendering, inserts a data:uri-using image tag in the document. May be overridden by e.g. the website module to generate links instead.)"
ir,qweb,field.contact,ir.qweb.field.contact,"Qweb Field Contact (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.date,ir.qweb.field.date,"Qweb Field Date (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.datetime,ir.qweb.field.datetime,"Qweb Field Datetime (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.duration,ir.qweb.field.duration,"Qweb Field Duration (``duration`` converter, to display integral or fractional values as human-readable time spans (e.g. 1.5 as """"1 hour 30 minutes""""). Can be used on any numerical field. Has an option ``unit`` which can be one of ``second``, ``minute``, ``hour``, ``day``, ``week`` or ``year``, used to interpret the numerical field value before converting it. By default use ``second``. Has an option ``round``. By default use ``second``. Has an option ``digital`` to display 01:00 instead of 1 hour Sub-second values will be ignored.)"
ir,qweb,field.float,ir.qweb.field.float,"Qweb Field Float (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.float_time,ir.qweb.field.float_time,"Qweb Field Float Time (``float_time`` converter, to display integral or fractional values as human-readable time spans (e.g. 1.5 as """"01:30""""). Can be used on any numerical field.)"
ir,qweb,field.html,ir.qweb.field.html,"Qweb Field HTML (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.image,ir.qweb.field.image,Qweb Field Image (Widget options: ``class`` set as attribute on the generated <img> tag)
ir,qweb,field.image_url,ir.qweb.field.image_url,"Qweb Field Image (``image_url`` widget rendering, inserts an image tag in the document.)"
ir,qweb,field.integer,ir.qweb.field.integer,"Qweb Field Integer (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.many2one,ir.qweb.field.many2one,"Qweb Field Many to One (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.monetary,ir.qweb.field.monetary,"Qweb Field Monetary (``monetary`` converter, has a mandatory option ``display_currency`` only if field is not of type Monetary. Otherwise, if we are in presence of a monetary field, the field definition must have a currency_field attribute set. The currency is used for formatting *and rounding* of the float value. It is assumed that the linked res_currency has a non-empty rounding value and res.currency's ``round`` method is used to perform rounding. .. note:: the monetary converter internally adds the qweb context to its options mapping, so that the context is available to callees. It's set under the ``_values`` key.)"
ir,qweb,field.relative,ir.qweb.field.relative,"Qweb Field Relative (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.selection,ir.qweb.field.selection,"Qweb Field Selection (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.text,ir.qweb.field.text,"Qweb Field Text (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.qweb,ir.qweb.field.qweb,"Qweb Field qweb (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
ir,qweb,field.many2many,ir.qweb.field.many2many,"Qweb field many2many (Used to convert a t-field specification into an output HTML field. :meth:`~.to_html` is the entry point of this conversion from QWeb, it: * converts the record value to html using :meth:`~.record_to_html` * generates the metadata attributes (``data-oe-``) to set on the root result node * generates the root result node itself through :meth:`~.render_element`)"
gamification,karma,rank,gamification.karma.rank,Rank based on karma (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
rating,rating,,rating.rating,Rating (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
rating,parent,mixin,rating.parent.mixin,"Rating Parent Mixin (The base model, which is implicitly inherited by all models.)"
hr,recruitment,report,hr.recruitment.report,Recruitment Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,recruitment,stage.report,hr.recruitment.stage.report,Recruitment Stage Analysis (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,recruitment,stage,hr.recruitment.stage,Recruitment Stages (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,applicant,refuse.reason,hr.applicant.refuse.reason,Refuse Reason of Applicant (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,work,entry.regeneration.wizard,hr.work.entry.regeneration.wizard,"Regenerate Employee Work Entries (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
expense,sample,register,expense.sample.register,"Register Sample Payments (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
event,mail,registration,event.mail.registration,Registration Mail Scheduler (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,model,relation,ir.model.relation,Relation Model (This model tracks PostgreSQL tables used to implement Odoo many2many relations.)
account,resequence,wizard,account.resequence.wizard,"Remake the sequence of Journal Entries. (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
product,removal,,product.removal,Removal Strategy (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,blacklist,remove,mail.blacklist.remove,"Remove email from blacklist wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
phone,blacklist,remove,phone.blacklist.remove,"Remove phone from blacklist (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,actions,report,ir.actions.report,Report Action (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
report,layout,,report.layout,Report Layout (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n_mx_edi,invoice,cancel,l10n_mx_edi.invoice.cancel,"Request CFDI Cancellation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,resend,recipient,sms.resend.recipient,"Resend Notification (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
reset,view,arch.wizard,reset.view.arch.wizard,Reset View Architecture Wizard (A wizard to compare and reset views architecture.)
pos_preparation_display,reset,wizard,pos_preparation_display.reset.wizard,"Reset all current order in a preparation display (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
resource,mixin,,resource.mixin,"Resource Mixin (The base model, which is implicitly inherited by all models.)"
resource,calendar,leaves,resource.calendar.leaves,Resource Time Off Detail (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
resource,calendar,,resource.calendar,"Resource Working Time (Calendar model for a resource. It has - attendance_ids: list of resource.calendar.attendance that are a working interval in a given weekday. - leave_ids: list of leaves linked to this calendar. A leave can be general or linked to a specific resource, depending on its resource_id. All methods in this class use intervals. An interval is a tuple holding (begin_datetime, end_datetime). A list of intervals is therefore a list of tuples, holding several intervals of work or leaves.)"
resource,resource,,resource.resource,Resources (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
restaurant,floor,,restaurant.floor,Restaurant Floor (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
restaurant,table,,restaurant.table,Restaurant Table (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,resume,line,hr.resume.line,Resume line of an employee (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,return,picking,stock.return.picking,"Return Picking (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,return,picking.line,stock.return.picking.line,"Return Picking Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
social,account,revoke.youtube,social.account.revoke.youtube,Revoke YouTube Account (Wizard to revoke a Youtube access token linked to a social account.)
website,robots,,website.robots,"Robots.txt Editor (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
quality,reason,,quality.reason,Root Cause for Quality Failure (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,rule,,ir.rule,Rule (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
account,reconcile,model.line,account.reconcile.model.line,Rules for the reconciliation model (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,seo,metadata,website.seo.metadata,"SEO metadata (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_sg,account.edi.xml.ubl_sg,"SG BIS Billing 3.0 (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_nl,account.edi.xml.ubl_nl,"SI-UBL 2.0 (NLCIUS) (The base model, which is implicitly inherited by all models.)"
sms,account,phone,sms.account.phone,"SMS Account Registration Phone Number Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,account,sender,sms.account.sender,"SMS Account Sender Name Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,account,code,sms.account.code,"SMS Account Verification Code Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,resend,,sms.resend,"SMS Resend (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,template,preview,sms.template.preview,"SMS Template Preview (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,template,reset,sms.template.reset,"SMS Template Reset (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,template,,sms.template,SMS Templates (Templates for sending SMS)
hr,salary,rule,hr.salary.rule,Salary Rule (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,salary,rule.category,hr.salary.rule.category,Salary Rule Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,rule,parameter,hr.rule.parameter,Salary Rule Parameter (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,rule,parameter.value,hr.rule.parameter.value,Salary Rule Parameter Value (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,structure,hr.payroll.structure,Salary Structure (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,structure.type,hr.payroll.structure.type,Salary Structure Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,loyalty,coupon.wizard,sale.loyalty.coupon.wizard,"Sale Loyalty - Apply Coupon Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,loyalty,reward.wizard,sale.loyalty.reward.wizard,"Sale Loyalty - Reward Selection Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,order,option,sale.order.option,Sale Options (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,alert,sale.order.alert,Sale Order Alert (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,coupon.points,sale.order.coupon.points,Sale Order Coupon Points - Keeps track of how a sale order impacts a coupon (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,log,sale.order.log,Sale Order Log (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,payment,provider.onboarding.wizard,sale.payment.provider.onboarding.wizard,Sale Payment provider onboarding wizard (Override for the sale quotation onboarding panel.)
sale,advance,payment.inv,sale.advance.payment.inv,"Sales Advance Payment Invoice (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,report,,sale.report,Sales Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,log.report,sale.order.log.report,Sales Log Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,order,cancel,sale.order.cancel,"Sales Order Cancel (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,order,line,sale.order.line,Sales Order Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mailing,mailing,test,mailing.mailing.test,"Sample Mail Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
discuss,gif,favorite,discuss.gif.favorite,Save favorite GIF from Tenor API (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,cron,,ir.cron,Scheduled Actions (Model describing cron jobs (also called actions or tasks).)
mail,scheduled,message,mail.scheduled.message,"Scheduled Message (Scheduled message model (holds post values generated by the composer to delay the posting of the message). Different from mail.message.schedule that posts the message but delays the notification process. Todo: when adding support for scheduling messages in mass_mail mode, could add a reference to the """"parent"""" composer (by making 'mail.compose.message' not transient anymore). This reference could then be used to cancel every message scheduled """"at the same time"""" (from one composer), and to get the static 'notification parameters' (mail_server_id, auto_delete,...) instead of duplicating them for each scheduled message. Currently as scheduling is allowed in monocomment only, we don't have duplicates and we only have static notification parameters, but some will become dynamic when adding mass_mail support such as 'email_from' and 'force_email_lang'.)"
mail,message,schedule,mail.message.schedule,Scheduled Messages (Mail message notification schedule queue. This model is used to store the mail messages scheduled. So we can delay the sending of the notifications. A scheduled date field already exists on the <mail.mail> but it does not allow us to delay the sending of the <bus.bus> notifications.)
stock,scrap,reason.tag,stock.scrap.reason.tag,Scrap Reason Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,secure,entries.wizard,account.secure.entries.wizard,Secure Journal Entries (This wizard is used to secure journal entries (with a hash))
select,printers,wizard,select.printers.wizard,"Selection of printers (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sms,composer,,sms.composer,"Send SMS Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
whatsapp,composer,,whatsapp.composer,"Send WhatsApp Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
fleet,vehicle,send.mail,fleet.vehicle.send.mail,"Send mails to Drivers (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
applicant,send,mail,applicant.send.mail,"Send mails to applicants (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
candidate,send,mail,candidate.send.mail,"Send mails to candidates (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,sequence,,ir.sequence,Sequence (Sequence model. The sequence model allows to define and use so-called sequence objects. Such objects are used to generate unique identifiers in a transaction-safe way.)
ir,sequence,date_range,ir.sequence.date_range,Sequence Date Range (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,actions,server,ir.actions.server,Server Action (Add WhatsApp option in server actions.)
report,pos_hr,single_employee_sales_report,report.pos_hr.single_employee_sales_report,"Session sales details for a single employee (The base model, which is implicitly inherited by all models.)"
ir,min,cron.mixin,ir.min.cron.mixin,"Set Min Next call on metabase (The base model, which is implicitly inherited by all models.)"
delivery,carrier,,delivery.carrier,Shipping Methods (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,users,apikeys.show,res.users.apikeys.show,"Show API Key (The base model, which is implicitly inherited by all models.)"
hr,skill,,hr.skill,Skill (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,skill,level,hr.skill.level,Skill Level (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,skill,type,hr.skill.type,Skill Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,candidate,skill,hr.candidate.skill,Skill level for a candidate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,employee,skill,hr.employee.skill,Skill level for an employee (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,employee,skill.log,hr.employee.skill.log,Skills History (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,slide,partner,slide.slide.partner,Slide / Partner decorated m2m (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,answer,,slide.answer,Slide Question's Answer (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
slide,tag,,slide.tag,Slide Tag (Tag to search slides across channels.)
snailmail,letter,,snailmail.letter,Snailmail Letter (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,orderpoint,snooze,stock.orderpoint.snooze,"Snooze Orderpoint (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
social,account,,social.account,"Social Account (A social.account represents an actual account on the related social.media. Ex: A Facebook Page or a Twitter Account. These social.accounts will then be used to send generic social.posts to multiple social.accounts. They are also used to display a 'dashboard' of statistics on the 'Feed' view. Account statistic fields are 'computed' manually through the _compute_statistics method that is overridden by each actual social module implementations (social_facebook, social_twitter, ...). The statistics computation is run manually when visualizing the Feed.)"
social,live,post,social.live.post,"Social Live Post (A social 'live' post, as opposed to a social.post, represents a post that is actually on a social.account instance. Basically, a social.post that is posted on 4 social.accounts will create 4 instances of the social.live.post.)"
social,post,template,social.post.template,"Social Post Template (Models the abstraction of social post content. It can generate multiple 'social.post' records to be sent on social medias This model contains all information related to the post content (message, images) but also some common methods. They can be used to prepare a social post without creating one (that can be useful in other application, like `social_event` e.g.). 'social.post.template' is therefore a template model used to generate `social.post`. It is inherited by `social.post` to extract common fields declaration and post management methods.)"
social,stream,,social.stream,"Social Stream (""""social.streams are used to fill the 'Feed' view that allows users to follow the social.media activity based on their interest (a Facebook Page, a Twitter hashtag, ...). They use the social.media third party API to fetch the stream data and create social.stream.posts that are displayed on the Feed kanban view.)"
social,stream,type,social.stream.type,"Social Stream Post (Technical model that allows social module implementations ('social_facebook', 'social_twitter', ...) to introduce their own social stream types (eg: 'Page Posts' for Facebook, 'Keyword' for Twitter, ...))"
social,stream,post,social.stream.post,"Social Stream Post (A 'stream' post, as opposed to a regular social.post, references a post that actually exists on a social.media external database (a Facebook post, a Tweet, ...). Stream posts are created by fetching data from the related social media third party API. They should not be directly created/modified. social.stream.posts are used to fill the 'Feed' view that allows users to follow the social.media activity based on their interest (a Facebook Page, a Twitter hashtag, ...). They are directly created by their related social.stream.)"
social,stream,post.image,social.stream.post.image,Social Stream Post Image Attachment (A social.stream.post.image represents an image that was shared with a social.stream.post. It only contains the URL of the image on the related social.media.)
social,twitter,account,social.twitter.account,Social X Account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,recruitment,source,hr.recruitment.source,Source of Applicants (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
pos,pack,operation.lot,pos.pack.operation.lot,Specify product lot/serial number in pos order line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,production,split.line,mrp.production.split.line,"Split Production Detail (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
spreadsheet,contributor,,spreadsheet.contributor,Spreadsheet Contributor (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
spreadsheet,dashboard,,spreadsheet.dashboard,Spreadsheet Dashboard (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
spreadsheet,template,,spreadsheet.template,Spreadsheet Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
save,spreadsheet,template,save.spreadsheet.template,"Spreadsheet Template Save Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
spreadsheet,mixin,,spreadsheet.mixin,Spreadsheet mixin (Allow sending messages related to the current model via as a bus.bus channel. The model needs to be allowed as a valid channel for the bus in `_build_bus_channel_list`.)
pos_preparation_display,order,stage,pos_preparation_display.order.stage,Stage of orders by preparation display (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,move,,stock.move,Stock Move (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,package,destination,stock.package.destination,"Stock Package Destination (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,package_level,,stock.package_level,Stock Package Level (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,quantity,history,stock.quantity.history,"Stock Quantity History (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,quant,relocate,stock.quant.relocate,"Stock Quantity Relocation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,stock,quantity,report.stock.quantity,Stock Quantity Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,stock,report_reception,report.stock.report_reception,"Stock Reception Report (The base model, which is implicitly inherited by all models.)"
stock,forecasted_product_template,,stock.forecasted_product_template,"Stock Replenishment Report (The base model, which is implicitly inherited by all models.)"
stock,forecasted_product_product,,stock.forecasted_product_product,"Stock Replenishment Report (The base model, which is implicitly inherited by all models.)"
stock,report,,stock.report,Stock Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,request,count,stock.request.count,"Stock Request an Inventory Count (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,rule,,stock.rule,"Stock Rule (A rule describe what a procurement should do; produce, buy, move, ...)"
stock,rules,report,stock.rules.report,"Stock Rules report (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,track,confirmation,stock.track.confirmation,"Stock Track Confirmation (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,track,line,stock.track.line,"Stock Track Line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,valuation,layer,stock.valuation.layer,Stock Valuation Layer (Stock Valuation Layer)
stock,package,type,stock.package.type,Stock package type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,stock,report_stock_rule,report.stock.report_stock_rule,"Stock rule report (The base model, which is implicitly inherited by all models.)"
stock,replenishment,info,stock.replenishment.info,"Stock supplier replenishment information (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,replenishment,option,stock.replenishment.option,"Stock warehouse replenishment option (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,storage,category,stock.storage.category,Storage Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,storage,category.capacity,stock.storage.category.capacity,Storage Category Capacity (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mail,link,preview,mail.link.preview,Store link preview data (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,approval,entry,studio.approval.entry,Studio Approval Entry (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,approval,request,studio.approval.request,Studio Approval Request (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,export,wizard.data,studio.export.wizard.data,"Studio Export Data (The wizard data resembles the ir.model.data model. It is used to store the export data for the wizard, even for data that do not have an xmlid (an ir.model.data record).)"
studio,export,model,studio.export.model,Studio Export Models (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
studio,export,wizard,studio.export.wizard,"Studio Export Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
studio,mixin,,studio.mixin,Studio Mixin (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
sale,subscription,report,sale.subscription.report,Subscription Analysis (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,subscription,change.customer.wizard,sale.subscription.change.customer.wizard,"Subscription Change Customer Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,order,close.reason,sale.order.close.reason,Subscription Close Reason (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
sale,subscription,close.reason.wizard,sale.subscription.close.reason.wizard,"Subscription Close Reason Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
sale,subscription,plan,sale.subscription.plan,Subscription Plan (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,supplierinfo,,product.supplierinfo,Supplier Pricelist (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
survey,invite,,survey.invite,"Survey Invitation Wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
survey,question,answer,survey.question.answer,"Survey Label (A preconfigured answer for a question. This model stores values used for * simple choice, multiple choice: proposed values for the selection / radio; * matrix: row and column values;)"
survey,question,,survey.question,"Survey Question (Questions that will be asked in a survey. Each question can have one of more suggested answers (eg. in case of multi-answer checkboxes, radio buttons...). Technical note: survey.question is also the model used for the survey's pages (with the """"is_page"""" field set to True). A page corresponds to a """"section"""" in the interface, and the fact that it separates the survey in actual pages in the interface depends on the """"questions_layout"""" parameter on the survey.survey model. Pages are also used when randomizing questions. The randomization can happen within a """"page"""". Using the same model for questions and pages allows to put all the pages and questions together in a o2m field (see survey.survey.question_and_page_ids) on the view side and easily reorganize your survey by dragging the items around. It also removes on level of encoding by directly having 'Add a page' and 'Add a question' links on the list view of questions, enabling a faster encoding. However, this has the downside of making the code reading a little bit more complicated. Efforts were made at the model level to create computed fields so that the use of these models still seems somewhat logical. That means: - A survey still has """"page_ids"""" (question_and_page_ids filtered on is_page   True) - These """"page_ids"""" still have question_ids (questions located between this page and the next) - These """"question_ids"""" still have a """"page_id"""" That makes the use and display of these information at view and controller levels easier to understand.)"
survey,user_input,line,survey.user_input.line,Survey User Input Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
google,calendar,sync,google.calendar.sync,"Synchronize a record with Google Calendar (The base model, which is implicitly inherited by all models.)"
ir,config_parameter,,ir.config_parameter,System Parameter (Per-database storage of configuration key-value pairs.)
documents,tag,,documents.tag,Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,task,recurrence,project.task.recurrence,Task Recurrence (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
project,task,type,project.task.type,Task Stage (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
report,industry_fsm,worksheet_custom,report.industry_fsm.worksheet_custom,"Task Worksheet Custom Report (The base model, which is implicitly inherited by all models.)"
project,task,stop.timers.wizard,project.task.stop.timers.wizard,"Task stop running timers confirmation wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
project,task,stop.timers.wizard.line,project.task.stop.timers.wizard.line,"Task stop running timers confirmation wizard line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
report,project,task.user,report.project.task.user,Tasks Analysis (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,tax,group,account.tax.group,Tax Group (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,fiscal,position.tax,account.fiscal.position.tax,Tax Mapping of Fiscal Position (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,tax,repartition.line,account.tax.repartition.line,Tax Repartition Line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,tax,unit,account.tax.unit,Tax Unit (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir_actions_account_report_download,,,ir_actions_account_report_download,"Technical model for accounting report downloads (The base model, which is implicitly inherited by all models.)"
template,reset,mixin,template.reset.mixin,"Template Reset Mixin (The base model, which is implicitly inherited by all models.)"
iot,channel,,iot.channel,"The Websocket Iot Channel (The base model, which is implicitly inherited by all models.)"
theme,ir,asset,theme.ir.asset,Theme Asset (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
theme,ir,attachment,theme.ir.attachment,Theme Attachments (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
theme,ir,ui.view,theme.ir.ui.view,Theme UI View (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
theme,utils,,theme.utils,"Theme Utils (The base model, which is implicitly inherited by all models.)"
hr,leave,report.calendar,hr.leave.report.calendar,Time Off Calendar (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,employee.type.report,hr.leave.employee.type.report,Time Off Summary / Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,report,hr.leave.report,Time Off Summary / Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,leave,type,hr.leave.type,Time Off Type (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
timer,mixin,,timer.mixin,"Timer Mixin (The base model, which is implicitly inherited by all models.)"
timer,timer,,timer.timer,Timer Module (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,timesheet,attendance.report,hr.timesheet.attendance.report,Timesheet Attendance Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
timesheet,grid,mixin,timesheet.grid.mixin,"Timesheet Grid mixin (The base model, which is implicitly inherited by all models.)"
timesheets,analysis,report,timesheets.analysis.report,Timesheets Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,timesheet,tip,hr.timesheet.tip,Timesheets Leaderboard Tip (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
web_tour,tour,step,web_tour.tour.step,Tour's step (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
web_tour,tour,,web_tour.tour,Tours (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,traceability,report,stock.traceability.report,"Traceability Report (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
event,track,visitor,event.track.visitor,Track / Visitor Link (Table linking track and visitors.)
gamification,karma,tracking,gamification.karma.tracking,Track Karma Changes (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fsm,stock,tracking,fsm.stock.tracking,"Track Stock (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,bank,statement.line.transient,account.bank.statement.line.transient,"Transient model for bank statement line (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,trial,balance.report.handler,account.trial.balance.report.handler,"Trial Balance Custom Handler (The base model, which is implicitly inherited by all models.)"
ir,cron,trigger,ir.cron.trigger,Triggered actions (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
expense,sample,receipt,expense.sample.receipt,Try Sample Receipts (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,resume,line.type,hr.resume.line.type,Type of a resume line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,edi,xml.ubl_20,account.edi.xml.ubl_20,"UBL 2.0 (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_21,account.edi.xml.ubl_21,"UBL 2.1 (The base model, which is implicitly inherited by all models.)"
purchase,edi,xml.ubl_bis3,purchase.edi.xml.ubl_bis3,"UBL BIS 3 Peppol Order transaction 3.4 (The base model, which is implicitly inherited by all models.)"
account,edi,xml.ubl_bis3,account.edi.xml.ubl_bis3,"UBL BIS Billing 3.0.12 (The base model, which is implicitly inherited by all models.)"
sale,edi,xml.ubl_bis3,sale.edi.xml.ubl_bis3,"UBL BIS Ordering 3.0 (The base model, which is implicitly inherited by all models.)"
utm,campaign,,utm.campaign,UTM Campaign (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
utm,medium,,utm.medium,UTM Medium (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
utm,mixin,,utm.mixin,UTM Mixin (Mixin class for objects which can be tracked by marketing.)
utm,source,,utm.source,UTM Source (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
utm,source,mixin,utm.source.mixin,"UTM Source Mixin (Mixin responsible of generating the name of the source based on the content (field defined by _rec_name) of the record (mailing, social post,...).)"
utm,tag,,utm.tag,"UTM Tag (Model of categories of utm campaigns, i.e. marketing, newsletter, ...)"
website,base,unit,website.base.unit,Unit of Measure for price per unit on eCommerce products. (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
_unknown,,,_unknown,Unknown (Abstract model used as a substitute for relational fields with an unknown comodel.)
loyalty,card,update.balance,loyalty.card.update.balance,"Update Loyalty Card Points (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
base,module,update,base.module.update,"Update Module (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
snailmail,letter,missing.required.fields,snailmail.letter.missing.required.fields,"Update address of partner (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
update,product,attribute.value,update.product.attribute.value,"Update product attribute value (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
crm,lead,pls.update,crm.lead.pls.update,"Update the probabilities (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
base,module,upgrade,base.module.upgrade,"Upgrade Module (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,users,,res.users,User (Update of res.users class - add a preference about sending emails about notifications - make a new user follow itself - add a welcome message - add suggestion preference)
bus,presence,,bus.presence,"User Presence (User Presence Its status is 'online', 'away' or 'offline'. This model should be a one2one, but is not attached to res_users to avoid database concurrence errors. Since the 'update_presence' method is executed at each poll, if the user have multiple opened tabs, concurrence errors can happend, but are 'muted-logged'.)"
res,users,settings,res.users.settings,User Settings (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,users,settings.volumes,res.users.settings.volumes,User Settings Volumes (Represents the volume of the sound that the user of user_setting_id will receive from partner_id.)
website,custom_blocked_third_party_domains,,website.custom_blocked_third_party_domains,"User list of blocked 3rd-party domains (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
change,password,user,change.password.user,"User, Change Password Wizard (A model to configure users in the change password wizard.)"
change,password,own,change.password.own,"User, change own password wizard (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
res,users,apikeys,res.users.apikeys,Users API Keys (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
res,users,deletion,res.users.deletion,"Users Deletion Request (User deletion requests. Those requests are logged in a different model to keep a trace of this action and the deletion is done in a CRON. Indeed, removing a user can be a heavy operation on large database (because of create_uid, write_uid on each model, which are not always indexed). This model just remove the users added in the deletion queue, remaining code must deal with other consideration (archiving, blacklist email...).)"
res,users,log,res.users.log,Users Log (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
validate,account,move,validate.account.move,"Validate Account Move (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
fleet,disallowed,expenses.rate,fleet.disallowed.expenses.rate,Vehicle Disallowed Expenses Rate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,state,fleet.vehicle.state,Vehicle Status (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
fleet,vehicle,tag,fleet.vehicle.tag,Vehicle Tag (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
vendor,delay,report,vendor.delay.report,Vendor Delay Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
ir,ui,view,ir.ui.view,View (Mixin that overrides the create and write methods to properly generate ir.model.data entries flagged with Studio for the corresponding resources. Doesn't create an ir.model.data if the record is part of a module being currently installed as the ir.model.data will be created automatically afterwards.)
website,track,,website.track,Visited Pages (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,warehouse,,stock.warehouse,Warehouse (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
stock,warn,insufficient.qty,stock.warn.insufficient.qty,"Warn Insufficient Quantity (The base model, which is implicitly inherited by all models.)"
stock,warn,insufficient.qty.scrap,stock.warn.insufficient.qty.scrap,"Warn Insufficient Scrap Quantity (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,warn,insufficient.qty.unbuild,stock.warn.insufficient.qty.unbuild,"Warn Insufficient Unbuild Quantity (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
web_editor,converter,test.sub,web_editor.converter.test.sub,Web Editor Converter Subtest (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
web_editor,converter,test,web_editor.converter.test,Web Editor Converter Test (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,,,website,Website (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,configurator,feature,website.configurator.feature,Website Configurator Feature (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,event,menu,website.event.menu,Website Event Menu (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,menu,,website.menu,Website Menu (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
product,public,category,product.public.category,Website Product Category (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,published,mixin,website.published.mixin,"Website Published Mixin (The base model, which is implicitly inherited by all models.)"
website,searchable,mixin,website.searchable.mixin,Website Searchable Mixin (Mixin to be inherited by all models that need to searchable through website)
website,snippet,filter,website.snippet.filter,Website Snippet Filter (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
theme,website,menu,theme.website.menu,Website Theme Menu (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
theme,website,page,theme.website.page,Website Theme Page (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,visitor,,website.visitor,Website Visitor (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
website,rewrite,,website.rewrite,Website rewrite (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,message,,whatsapp.message,WhatsApp Messages (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,template,button,whatsapp.template.button,WhatsApp Template Button (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
whatsapp,template,variable,whatsapp.template.variable,WhatsApp Template Variable (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,duplicate,transaction.wizard,account.duplicate.transaction.wizard,"Wizard for duplicate transactions (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account,missing,transaction.wizard,account.missing.transaction.wizard,"Wizard for missing transactions (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
account_followup,manual_reminder,,account_followup.manual_reminder,"Wizard for sending manual reminders to clients (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
l10n_mx_xml_polizas,xml_polizas_wizard,,l10n_mx_xml_polizas.xml_polizas_wizard,"Wizard for the XML Polizas export of Journal Entries (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,consumption,warning,mrp.consumption.warning,"Wizard in case of consumption in warning/strict and more component has been used for a MO (related to the bom) (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
stock,valuation,layer.revaluation,stock.valuation.layer.revaluation,"Wizard model to reavaluate a stock inventory for a product (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,production,split.multi,mrp.production.split.multi,"Wizard to Split Multiple Productions (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,production,split,mrp.production.split,"Wizard to Split a Production (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,production,backorder,mrp.production.backorder,"Wizard to mark as done or create back order (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,account,wip.accounting,mrp.account.wip.accounting,"Wizard to post Manufacturing WIP account move (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
mrp,workcenter,capacity,mrp.workcenter.capacity,Work Center Capacity (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
resource,calendar,attendance,resource.calendar.attendance,Work Detail (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,work,entry.report,hr.work.entry.report,Work Entries Analysis Report (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,user,work.entry.employee,hr.user.work.entry.employee,Work Entries Employees (Personnal calendar filter)
hr,work,entry.export.employee.mixin,hr.work.entry.export.employee.mixin,"Work Entry Export Employee (The base model, which is implicitly inherited by all models.)"
hr,work,entry.export.mixin,hr.work.entry.export.mixin,"Work Entry Export Mixin (The base model, which is implicitly inherited by all models.)"
hr,work,location,hr.work.location,Work Location (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,workorder,,mrp.workorder,Work Order (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,workcenter,productivity,mrp.workcenter.productivity,Workcenter Productivity Log (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mrp,workcenter,productivity.loss,mrp.workcenter.productivity.loss,Workcenter Productivity Losses (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
hr,payroll,headcount.working.rate,hr.payroll.headcount.working.rate,Working Rate (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
worksheet,template,,worksheet.template,Worksheet Template (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
x_cables_line_3407c,,,x_cables_line_3407c,cables_line (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n,mx,hr.fonacot,l10n.mx.hr.fonacot,fonacot (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
l10n,mx,hr.infonavit,l10n.mx.hr.infonavit,infonavit (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
account,online,account,account.online.account,representation of an online bank account (Main super-class for regular database-persisted Odoo models. Odoo models are created by inheriting from this class:: class user(Model): ... The system will later instantiate the class once per database (on which the class' module is installed).)
mailing,mailing,schedule.date,mailing.mailing.schedule.date,"schedule a mailing (Model super-class for transient records, meant to be temporarily persistent, and regularly vacuum-cleaned. A TransientModel has a simplified access rights management, all users can create new records, and may only access the records they created. The superuser has unrestricted access to all TransientModel records.)"
ir,websocket,,ir.websocket,"websocket message handling (The base model, which is implicitly inherited by all models.)"
